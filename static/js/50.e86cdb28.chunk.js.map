{"version":3,"file":"static/js/50.e86cdb28.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/app/ResizePlugin.ts","../node_modules/pixi.js/src/app/TickerPlugin.ts","../node_modules/pixi.js/src/app/init.ts","../node_modules/pixi.js/src/filters/FilterPipe.ts","../node_modules/pixi.js/src/scene/container/bounds/getFastGlobalBounds.ts","../node_modules/pixi.js/src/filters/FilterSystem.ts","../node_modules/pixi.js/src/scene/container/bounds/getRenderableBounds.ts","../node_modules/pixi.js/src/filters/init.ts","../node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts","../node_modules/pixi.js/src/rendering/renderers/shared/state/State.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/CanvasPool.ts","../node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts","../node_modules/pixi.js/src/scene/graphics/shared/GraphicsPipe.ts","../node_modules/pixi.js/src/scene/graphics/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshPipe.ts","../node_modules/pixi.js/src/scene/mesh/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshGeometry.ts","../node_modules/pixi.js/src/scene/particle-container/gl/GlParticleContainerAdaptor.ts","../node_modules/pixi.js/src/scene/particle-container/shared/utils/createIndicesForQuads.ts","../node_modules/pixi.js/src/scene/particle-container/shared/utils/generateParticleUpdateFunction.ts","../node_modules/pixi.js/src/scene/particle-container/shared/ParticleBuffer.ts","../node_modules/pixi.js/src/scene/particle-container/shared/shader/ParticleShader.ts","../node_modules/pixi.js/src/scene/particle-container/shared/ParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/shared/GlParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/gpu/GpuParticleContainerAdaptor.ts","../node_modules/pixi.js/src/scene/particle-container/shared/GpuParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/init.ts","../node_modules/pixi.js/src/scene/mesh-plane/PlaneGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/init.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/tilingBit.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/QuadGeometry.ts","../node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/applyMatrix.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setPositions.ts","../node_modules/pixi.js/src/scene/sprite-tiling/init.ts","../node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/localUniformMSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/mSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/SdfShader.ts","../node_modules/pixi.js/src/scene/text-bitmap/AbstractBitmapFont.ts","../node_modules/pixi.js/src/scene/text-bitmap/utils/resolveCharacters.ts","../node_modules/pixi.js/src/scene/text-bitmap/DynamicBitmapFont.ts","../node_modules/pixi.js/src/scene/text-bitmap/utils/getBitmapTextLayout.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapFontManager.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapTextPipe.ts","../node_modules/pixi.js/src/scene/text-bitmap/init.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextPipe.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextRenderData.ts","../node_modules/pixi.js/src/scene/text-html/utils/textStyleToCSS.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextStyle.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontCSS.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontAsBase64.ts","../node_modules/pixi.js/src/scene/text-html/utils/getFontCss.ts","../node_modules/pixi.js/src/scene/text-html/utils/measureHtmlText.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextSystem.ts","../node_modules/pixi.js/src/scene/text-html/utils/extractFontFamilies.ts","../node_modules/pixi.js/src/scene/text-html/utils/getSVGUrl.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadSVGImage.ts","../node_modules/pixi.js/src/utils/browser/isSafari.ts","../node_modules/pixi.js/src/scene/text-html/utils/getTemporaryCanvasFromImage.ts","../node_modules/pixi.js/src/scene/text-html/init.ts","../node_modules/pixi.js/src/scene/text/TextStyle.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextMetrics.ts","../node_modules/pixi.js/src/scene/text/canvas/utils/fontStringFromTextStyle.ts","../node_modules/pixi.js/src/scene/text/canvas/utils/getCanvasFillStyle.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts","../node_modules/pixi.js/src/utils/canvas/getCanvasBoundingBox.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextSystem.ts","../node_modules/pixi.js/src/scene/text/init.ts","../node_modules/pixi.js/src/scene/text/utils/generateTextStyleKey.ts","../node_modules/pixi.js/src/scene/text/utils/getPo2TextureFromSource.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { Renderer } from '../rendering/renderers/types';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Application options for the {@link app.ResizePlugin}.\n * @memberof app\n * @property {Window|HTMLElement} [resizeTo=window] - Element to automatically resize the renderer to.\n */\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize the renderer to.\n     * @memberof app.ApplicationOptions\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for Application's resize functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#resizeTo}\n * * {@link app.Application#resize}\n * * {@link app.Application#queueResize}\n * * {@link app.Application#cancelResize}\n * @example\n * import { extensions, ResizePlugin } from 'pixi.js';\n *\n * extensions.add(ResizePlugin);\n * @memberof app\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static _cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof app.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof app.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this._cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof app.Application#\n         * @method cancelResize\n         * @private\n         */\n        this._cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof app.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this._cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._cancelResize();\n        this._cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Application options for the {@link app.TickerPlugin}.\n * @memberof app\n * @property {boolean} [autoStart=true] - Automatically starts the rendering after the construction.\n * **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n * `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n * @property {boolean} [sharedTicker=false] - Set`true` to use `Ticker.shared`, `false` to create new ticker.\n * If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n * The system ticker will always run before both the shared ticker and the app ticker.\n */\nexport interface TickerPluginOptions\n{\n    /**\n     * Automatically starts the rendering after the construction.\n     *  **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n     *  `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n     * @memberof app.ApplicationOptions\n     * @default true\n     */\n    autoStart?: boolean;\n    /**\n     * Set`true` to use `Ticker.shared`, `false` to create new ticker.\n     *  If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @memberof app.ApplicationOptions\n     * @default false\n     */\n    sharedTicker?: boolean;\n}\n\n/**\n * Middleware for Application's {@link ticker.Ticker} functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#start}\n * * {@link app.Application#stop}\n * * {@link app.Application#ticker}\n * @example\n * import { extensions, TickerPlugin } from 'pixi.js';\n *\n * extensions.add(TickerPlugin);\n * @memberof app\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static start: () => void;\n    public static stop: () => void;\n    private static _ticker: Ticker;\n    public static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options?: PixiMixins.ApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {Ticker}\n         * @name _ticker\n         * @memberof app.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {ticker.Ticker}\n         * @name ticker\n         * @memberof app.Application#\n         * @default Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n","import { extensions } from '../extensions/Extensions';\nimport { ResizePlugin } from './ResizePlugin';\nimport { TickerPlugin } from './TickerPlugin';\n\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n","import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { boundsPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\n// TODO could we cache local bounds on the render groups?\n\nconst tempMatrix = new Matrix();\n\n/**\n * Does exactly the same as getGlobalBounds, but does instead makes use of transforming AABBs\n * of the various children within the scene graph. This is much faster, but less accurate.\n *\n * the result will never be smaller - only ever slightly larger (in most cases, it will be the same).\n * @param target - The target container to get the bounds from\n * @param bounds - The output bounds object.\n * @returns The bounds.\n */\nexport function getFastGlobalBounds(target: Container, bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    _getGlobalBoundsRecursive(target, bounds);\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    const renderGroup = target.renderGroup || target.parentRenderGroup;\n\n    bounds.applyMatrix(renderGroup.worldTransform);\n\n    return bounds;\n}\n\nexport function _getGlobalBoundsRecursive(\n    target: Container,\n    bounds: Bounds,\n)\n{\n    if (target.localDisplayStatus !== 0b111 || !target.measurable)\n    {\n        return;\n    }\n\n    const manageEffects = !!target.effects.length;\n\n    let localBounds = bounds;\n\n    if (target.renderGroup || manageEffects)\n    {\n        localBounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, target.worldTransform);\n    }\n    else\n    {\n        if (target.renderPipeId)\n        {\n            const viewBounds = (target as Renderable).bounds;\n\n            localBounds.addFrame(\n                viewBounds.minX,\n                viewBounds.minY,\n                viewBounds.maxX,\n                viewBounds.maxY,\n                target.groupTransform\n            );\n        }\n\n        const children = target.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            _getGlobalBoundsRecursive(children[i], localBounds);\n        }\n    }\n\n    if (manageEffects)\n    {\n        let advanced = false;\n\n        const renderGroup = target.renderGroup || target.parentRenderGroup;\n\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            if (target.effects[i].addBounds)\n            {\n                if (!advanced)\n                {\n                    advanced = true;\n                    localBounds.applyMatrix(renderGroup.worldTransform);\n                }\n\n                target.effects[i].addBounds(localBounds, true);\n            }\n        }\n\n        if (advanced)\n        {\n            localBounds.applyMatrix(renderGroup.worldTransform.copyTo(tempMatrix).invert());\n            bounds.addBounds(localBounds, target.relativeGroupTransform);\n        }\n\n        bounds.addBounds(localBounds);\n        boundsPool.return(localBounds);\n    }\n    else if (target.renderGroup)\n    {\n        bounds.addBounds(localBounds, target.relativeGroupTransform);\n        boundsPool.return(localBounds);\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { Point } from '../maths/point/Point';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\ntype FilterAction = 'pushFilter' | 'popFilter';\n\n//\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: FilterAction,\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\nexport interface FilterData\n{\n    skip: boolean;\n    enabledLength?: number;\n    inputTexture: Texture\n    bounds: Bounds,\n    blendRequired: boolean,\n    container: Container,\n    filterEffect: FilterEffect,\n    previousRenderSurface: RenderSurface,\n    backTexture?: Texture,\n}\n\n/**\n * System that manages the filter pipeline\n * @memberof rendering\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        if (!this._filterStack[this._filterStackIndex])\n        {\n            this._filterStack[this._filterStackIndex] = this._getFilterData();\n        }\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        this._filterStackIndex++;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds: Bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            getFastGlobalBounds(instruction.container, bounds);\n        }\n\n        if (instruction.container)\n        {\n            // When a container is cached as a texture, its filters need to be applied relative to its\n            // cached parent's coordinate space rather than world space. This transform adjustment ensures\n            // filters are applied in the correct coordinate system.\n            const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n            const filterFrameTransform = renderGroup.cacheToLocalTransform;\n\n            if (filterFrameTransform)\n            {\n                bounds.applyMatrix(filterFrameTransform);\n            }\n        }\n\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = Infinity;\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for all filter, it should be true, and otherwise false\n        let antialias = true;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n        // false if any filter in the list has false\n        let clipToViewport = true;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution === 'inherit'\n                ? colorTextureSource._resolution : filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias === 'off')\n            {\n                antialias = false;\n            }\n            else if (filter.antialias === 'inherit')\n            {\n                antialias &&= colorTextureSource.antialias;\n            }\n\n            if (!filter.clipToViewport)\n            {\n                clipToViewport = false;\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired ||= filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        if (clipToViewport)\n        {\n            const viewPort = renderer.renderTarget.rootViewPort;\n\n            const rootResolution = renderer.renderTarget.renderTarget.resolution;\n\n            bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n        }\n\n        // round the bounds to the nearest pixel\n        bounds\n            .scale(resolution)\n            .ceil()\n            .scale(1 / resolution)\n            .pad(padding | 0);\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set all the filter data\n        filterData.skip = false;\n\n        filterData.bounds = bounds;\n        filterData.blendRequired = blendRequired;\n        filterData.container = instruction.container;\n        filterData.filterEffect = instruction.filterEffect;\n\n        filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            resolution,\n            antialias,\n        );\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n        // set the global uniforms to take into account the bounds offset required\n\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        this._filterStackIndex--;\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        this._activeFilterData = filterData;\n\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        let backTexture = Texture.EMPTY;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (filterData.blendRequired)\n        {\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n\n            backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n        }\n\n        filterData.backTexture = backTexture;\n\n        const filters = filterData.filterEffect.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(backTexture.source, 3);\n\n        renderer.globalUniforms.pop();\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            // this.applyFilter(filters[0], inputTexture, filterData.previousRenderSurface, false);\n            filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n\n            // return the texture to the pool so we can reuse the next frame\n            TexturePool.returnTexture(inputTexture);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            // get another texture that we will render the next filter too\n            let flop = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n\n            // return those textures for later!\n            TexturePool.returnTexture(flip);\n            TexturePool.returnTexture(flop);\n        }\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(backTexture);\n        }\n    }\n\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        const bounds = filterData.bounds;\n\n        const offset = Point.shared;\n        const previousRenderSurface = filterData.previousRenderSurface;\n\n        const isFinalTarget = previousRenderSurface === output;\n\n        let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n\n        // to find the previous resolution we need to account for the skipped filters\n        // the following will find the last non skipped filter...\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        if (currentIndex > 0)\n        {\n            resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n        }\n\n        const filterUniforms = this._filterGlobalUniforms;\n        const uniforms = filterUniforms.uniforms;\n\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            let lastIndex = this._filterStackIndex;\n\n            // get previous bounds.. we must take into account skipped filters also..\n            while (lastIndex > 0)\n            {\n                lastIndex--;\n                const filterData = this._filterStack[this._filterStackIndex - 1];\n\n                if (!filterData.skip)\n                {\n                    offset.x = filterData.bounds.minX;\n                    offset.y = filterData.bounds.minY;\n\n                    break;\n                }\n            }\n\n            outputFrame[0] = bounds.minX - offset.x;\n            outputFrame[1] = bounds.minY - offset.y;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offset.x * resolution;\n        globalFrame[1] = offset.y * resolution;\n\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // set the output texture - this is where we are going to render to\n\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n        filterUniforms.update();\n\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(filterUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(filterUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    private _getFilterData(): FilterData\n    {\n        return {\n            skip: false,\n            inputTexture: null,\n            bounds: new Bounds(),\n            container: null,\n            filterEffect: null,\n            blendRequired: false,\n            previousRenderSurface: null,\n        };\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n\n        if (renderGroup && renderGroup.cacheToLocalTransform)\n        {\n            // get the matrix relative to the render group..\n            worldTransform.prepend(renderGroup.cacheToLocalTransform);\n        }\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.frame.width,\n            1.0 / sprite.texture.frame.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy?: () => void;\n}\n","import type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Bounds } from './Bounds';\n\nexport function getGlobalRenderableBounds(renderables: Renderable[], bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    // instead of copying the matrix each time we are assigning it in bounds\n    // this is a performance hack :D\n    // so we need to restore the matrix after we are done\n\n    const tempMatrix = bounds.matrix;\n\n    for (let i = 0; i < renderables.length; i++)\n    {\n        const renderable = renderables[i];\n\n        if (renderable.globalDisplayStatus < 0b111)\n        {\n            continue;\n        }\n\n        bounds.matrix = renderable.worldTransform;\n        bounds.addBounds(renderable.bounds);\n    }\n\n    bounds.matrix = tempMatrix;\n\n    return bounds;\n}\n","import { extensions } from '../extensions/Extensions';\nimport { FilterPipe } from './FilterPipe';\nimport { FilterSystem } from './FilterSystem';\n\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n","export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n","import type { BLEND_MODES, CULL_MODES } from './const';\n\nconst blendModeIds = {\n    normal: 0,\n    add: 1,\n    multiply: 2,\n    screen: 3,\n    overlay: 4,\n    erase: 5,\n    'normal-npm': 6,\n    'add-npm': 7,\n    'screen-npm': 8,\n    min: 9,\n    max: 10,\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @memberof rendering\n */\nexport class State\n{\n    /**\n     * The data is a unique number based on the states settings.\n     * This lets us quickly compare states with a single number rather than looking\n     * at all the individual settings.\n     */\n    public data: number;\n    public _blendModeId: number;\n    private _blendMode: BLEND_MODES;\n    private _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = 'normal';\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n    set cullMode(value: CULL_MODES)\n    {\n        if (value === 'none')\n        {\n            this.culling = false;\n\n            return;\n        }\n\n        this.culling = true;\n        this.clockwiseFrontFace = value === 'front';\n    }\n\n    get cullMode(): CULL_MODES\n    {\n        if (!this.culling)\n        {\n            return 'none';\n        }\n\n        return this.clockwiseFrontFace ? 'front' : 'back';\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default 'normal'\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== 'none');\n        this._blendMode = value;\n        this._blendModeId = blendModeIds[value as keyof typeof blendModeIds] || 0;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    /**\n     * A quickly getting an instance of a State that is configured for 2d rendering.\n     * @returns a new State with values set for 2d rendering\n     */\n    public static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n\n    public static default2d = State.for2d();\n}\n\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { nextPow2 } from '../../../../maths/misc/pow2';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\n\nexport interface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @name CanvasPool\n * @memberof rendering\n */\nexport class CanvasPoolClass\n{\n    public canvasOptions: ICanvasRenderingContext2DSettings;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    private _canvasPool: {[x in string | number]: CanvasAndContext[]};\n\n    constructor(canvasOptions?: ICanvasRenderingContext2DSettings)\n    {\n        this._canvasPool = Object.create(null);\n        this.canvasOptions = canvasOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     */\n    private _createCanvasAndContext(pixelWidth: number, pixelHeight: number): CanvasAndContext\n    {\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = pixelWidth;\n        canvas.height = pixelHeight;\n\n        const context = canvas.getContext('2d');\n\n        return { canvas, context };\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @returns The new render texture.\n     */\n    public getOptimalCanvasAndContext(minWidth: number, minHeight: number, resolution = 1): CanvasAndContext\n    {\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n        minWidth = nextPow2(minWidth);\n        minHeight = nextPow2(minHeight);\n\n        const key = (minWidth << 17) + (minHeight << 1);\n\n        if (!this._canvasPool[key])\n        {\n            this._canvasPool[key] = [];\n        }\n\n        let canvasAndContext = this._canvasPool[key].pop();\n\n        if (!canvasAndContext)\n        {\n            canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n        }\n\n        return canvasAndContext;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param canvasAndContext\n     */\n    public returnCanvasAndContext(canvasAndContext: CanvasAndContext): void\n    {\n        const canvas = canvasAndContext.canvas;\n        const { width, height } = canvas;\n\n        const key = (width << 17) + (height << 1);\n\n        canvasAndContext.context.clearRect(0, 0, width, height);\n\n        this._canvasPool[key].push(canvasAndContext);\n    }\n\n    public clear(): void\n    {\n        this._canvasPool = {};\n    }\n}\n\nexport const CanvasPool = new CanvasPoolClass();\n","export function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../gpu/colorToUniform';\nimport { BatchableGraphics } from './BatchableGraphics';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { RenderableGCSystem } from '../../../rendering/renderers/shared/texture/RenderableGCSystem';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../../container/Container';\nimport type { Graphics } from './Graphics';\nimport type { GpuGraphicsContext, GraphicsContextSystem } from './GraphicsContextSystem';\n\nexport interface GraphicsAdaptor\n{\n    shader: Shader;\n    init(): void;\n    execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void;\n    destroy(): void;\n}\nexport interface GraphicsSystem\n{\n    graphicsContext: GraphicsContextSystem;\n    renderableGC: RenderableGCSystem;\n    renderPipes: {\n        batch: BatchPipe\n    }\n    _roundPixels: 0 | 1;\n}\n\nexport class GraphicsPipe implements RenderPipe<Graphics>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public renderer: GraphicsSystem;\n    public state: State = State.for2d();\n\n    // batchable graphics list, used to render batches\n    private _graphicsBatchesHash: Record<number, BatchableGraphics[]> = Object.create(null);\n    private _adaptor: GraphicsAdaptor;\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: GraphicsSystem, adaptor: GraphicsAdaptor)\n    {\n        this.renderer = renderer;\n\n        this._adaptor = adaptor;\n        this._adaptor.init();\n\n        this.renderer.renderableGC.addManagedHash(this, '_graphicsBatchesHash');\n    }\n\n    public validateRenderable(graphics: Graphics): boolean\n    {\n        // assume context is dirty..\n\n        const context = graphics.context;\n\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n\n        if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable)\n        {\n            // TODO what if they are the same size??\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // need to get batches here.. as we need to know if we can batch or not..\n        // this also overrides the current batches..\n\n        if (graphics.didViewUpdate)\n        {\n            this._rebuild(graphics);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._addToBatcher(graphics, instructionSet);\n        }\n        else\n        {\n            this.renderer.renderPipes.batch.break(instructionSet);\n            instructionSet.add(graphics);\n        }\n    }\n\n    public updateRenderable(graphics: Graphics)\n    {\n        const batches = this._graphicsBatchesHash[graphics.uid];\n\n        if (batches)\n        {\n            for (let i = 0; i < batches.length; i++)\n            {\n                const batch = batches[i];\n\n                batch._batcher.updateElement(batch);\n            }\n        }\n    }\n\n    public destroyRenderable(graphics: Graphics)\n    {\n        if (this._graphicsBatchesHash[graphics.uid])\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        graphics.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(graphics: Graphics)\n    {\n        if (!graphics.isRenderable) return;\n\n        const renderer = this.renderer;\n        const context = graphics.context;\n        const contextSystem = renderer.graphicsContext;\n\n        // early out if there is no actual visual stuff...\n        if (!contextSystem.getGpuContext(context).batches.length)\n        { return; }\n\n        const shader = context.customShader || this._adaptor.shader;\n\n        this.state.blendMode = graphics.groupBlendMode;\n\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = graphics.groupTransform;\n        localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n\n        color32BitToUniform(\n            graphics.groupColorAlpha,\n            localUniforms.uColor,\n            0,\n        );\n\n        this._adaptor.execute(this, graphics);\n    }\n\n    private _rebuild(graphics: Graphics)\n    {\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // TODO POOL the old batches!\n\n        if (wasBatched)\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._initBatchesForRenderable(graphics);\n        }\n\n        graphics.batched = gpuContext.isBatchable;\n    }\n\n    private _addToBatcher(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const batchPipe = this.renderer.renderPipes.batch;\n\n        const batches = this._getBatchesForRenderable(graphics);\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batchPipe.addToBatch(batch, instructionSet);\n        }\n    }\n\n    private _getBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n    }\n\n    private _initBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        const context = graphics.context;\n\n        const gpuContext: GpuGraphicsContext = this.renderer.graphicsContext.getGpuContext(context);\n\n        const roundPixels = (this.renderer._roundPixels | graphics._roundPixels) as 0 | 1;\n\n        const batches = gpuContext.batches.map((batch) =>\n        {\n            const batchClone = BigPool.get(BatchableGraphics);\n\n            batch.copyTo(batchClone);\n\n            batchClone.renderable = graphics;\n\n            batchClone.roundPixels = roundPixels;\n\n            return batchClone;\n        });\n\n        if (this._graphicsBatchesHash[graphics.uid] === undefined)\n        {\n            // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n            graphics.on('destroyed', this._destroyRenderableBound);\n        }\n\n        this._graphicsBatchesHash[graphics.uid] = batches;\n\n        return batches;\n    }\n\n    private _removeBatchForRenderable(graphicsUid: number)\n    {\n        this._graphicsBatchesHash[graphicsUid].forEach((batch) =>\n        {\n            BigPool.return(batch as PoolItem);\n        });\n\n        this._graphicsBatchesHash[graphicsUid] = null;\n    }\n\n    public destroy()\n    {\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n        this.state = null;\n\n        for (const i in this._graphicsBatchesHash)\n        {\n            this._removeBatchForRenderable(i as unknown as number);\n        }\n\n        this._graphicsBatchesHash = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem';\nimport { GraphicsPipe } from './shared/GraphicsPipe';\n\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from './BatchableMesh';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type {\n    InstructionPipe,\n    RenderPipe\n} from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../../container/Container';\nimport type { Mesh } from './Mesh';\n\n// TODO Record mode is a P2, will get back to this as it's not a priority\n// const recordMode = true;\n\ninterface MeshData\n{\n    batched: boolean;\n    indexSize: number;\n    vertexSize: number;\n}\n\nexport interface MeshAdaptor\n{\n    init(): void;\n    execute(meshPipe: MeshPipe, mesh: Mesh): void;\n    destroy(): void;\n}\n\nexport class MeshPipe implements RenderPipe<Mesh>, InstructionPipe<Mesh>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'mesh',\n    } as const;\n\n    public localUniforms = new UniformGroup({\n        uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n        uRound: { value: 0, type: 'f32' },\n    });\n\n    public localUniformsBindGroup = new BindGroup({\n        0: this.localUniforms,\n    });\n\n    public renderer: Renderer;\n\n    private _meshDataHash: Record<number, MeshData> = Object.create(null);\n    private _gpuBatchableMeshHash: Record<number, BatchableMesh> = Object.create(null);\n    private _adaptor: MeshAdaptor;\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer, adaptor: MeshAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init();\n\n        renderer.renderableGC.addManagedHash(this, '_gpuBatchableMeshHash');\n        renderer.renderableGC.addManagedHash(this, '_meshDataHash');\n    }\n\n    public validateRenderable(mesh: Mesh): boolean\n    {\n        const meshData = this._getMeshData(mesh);\n\n        const wasBatched = meshData.batched;\n\n        const isBatched = mesh.batched;\n\n        meshData.batched = isBatched;\n\n        if (wasBatched !== isBatched)\n        {\n            return true;\n        }\n        else if (isBatched)\n        {\n            const geometry = mesh._geometry;\n\n            // no need to break the batch if it's the same size\n            if (geometry.indices.length !== meshData.indexSize\n                    || geometry.positions.length !== meshData.vertexSize)\n            {\n                meshData.indexSize = geometry.indices.length;\n                meshData.vertexSize = geometry.positions.length;\n\n                return true;\n            }\n\n            const batchableMesh = this._getBatchableMesh(mesh);\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                mesh.texture\n            );\n        }\n\n        return false;\n    }\n\n    public addRenderable(mesh: Mesh, instructionSet: InstructionSet)\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        const { batched } = this._getMeshData(mesh);\n\n        if (batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            batcher.addToBatch(gpuBatchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            instructionSet.add(mesh);\n        }\n    }\n\n    public updateRenderable(mesh: Mesh)\n    {\n        if (mesh.batched)\n        {\n            const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n        }\n    }\n\n    public destroyRenderable(mesh: Mesh)\n    {\n        this._meshDataHash[mesh.uid] = null;\n\n        const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n        if (gpuMesh)\n        {\n            BigPool.return(gpuMesh as PoolItem);\n            this._gpuBatchableMeshHash[mesh.uid] = null;\n        }\n\n        mesh.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(mesh: Mesh)\n    {\n        if (!mesh.isRenderable) return;\n\n        mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n\n        const localUniforms = this.localUniforms;\n\n        localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n        localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n        localUniforms.update();\n\n        color32BitToUniform(\n            mesh.groupColorAlpha,\n            localUniforms.uniforms.uColor,\n            0\n        );\n\n        this._adaptor.execute(this, mesh);\n    }\n\n    private _getMeshData(mesh: Mesh): MeshData\n    {\n        return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n    }\n\n    private _initMeshData(mesh: Mesh): MeshData\n    {\n        this._meshDataHash[mesh.uid] = {\n            batched: mesh.batched,\n            indexSize: mesh._geometry.indices?.length,\n            vertexSize: mesh._geometry.positions?.length,\n        };\n\n        mesh.on('destroyed', this._destroyRenderableBound);\n\n        return this._meshDataHash[mesh.uid];\n    }\n\n    private _getBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n    }\n\n    private _initBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        // TODO - make this batchable graphics??\n        const gpuMesh: BatchableMesh = BigPool.get(BatchableMesh);\n\n        gpuMesh.renderable = mesh;\n        gpuMesh.texture = mesh._texture;\n        gpuMesh.transform = mesh.groupTransform;\n        gpuMesh.roundPixels = (this.renderer._roundPixels | mesh._roundPixels) as 0 | 1;\n\n        this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n\n        return gpuMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuBatchableMeshHash)\n        {\n            if (this._gpuBatchableMeshHash[i])\n            {\n                BigPool.return(this._gpuBatchableMeshHash[i] as PoolItem);\n            }\n        }\n\n        this._gpuBatchableMeshHash = null;\n        this._meshDataHash = null;\n\n        this.localUniforms = null;\n        this.localUniformsBindGroup = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        this.renderer = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { MeshPipe } from './shared/MeshPipe';\n\nextensions.add(MeshPipe);\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements DefaultBatchableMeshElement\n{\n    public batcherName = 'default';\n\n    public _topology: Topology;\n\n    public readonly packAsQuad = false;\n    public location: number;\n\n    public renderable: ViewContainer;\n\n    public indexOffset = 0;\n    public attributeOffset = 0;\n\n    public texture: Texture;\n    public geometry: MeshGeometry;\n    public transform: Matrix;\n    public roundPixels: 0 | 1 = 0;\n\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n    public _indexStart: number;\n    public _textureId: number;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n    private _textureMatrixUpdateId: number = -1;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n\n    get topology() { return this._topology || this.geometry.topology; }\n    set topology(value: Topology) { this._topology = value; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.geometry = null;\n        this._uvUpdateId = -1;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    get uvs()\n    {\n        const geometry = this.geometry;\n\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        return transformedUvs as Float32Array;\n    }\n\n    get positions()\n    {\n        return this.geometry.positions;\n    }\n\n    get indices()\n    {\n        return this.geometry.indices;\n    }\n\n    get color()\n    {\n        return this.renderable.groupColorAlpha;\n    }\n\n    get groupTransform()\n    {\n        return this.renderable.groupTransform;\n    }\n\n    get attributeSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { BatchMode } from '../../graphics/shared/GraphicsContext';\n\n/**\n * Options for the mesh geometry.\n * @memberof scene\n */\nexport interface MeshGeometryOptions\n{\n    /** The positions of the mesh. */\n    positions?: Float32Array;\n    /** The UVs of the mesh. */\n    uvs?: Float32Array;\n    /** The indices of the mesh. */\n    indices?: Uint32Array;\n    /** The topology of the mesh. */\n    topology?: Topology;\n    /** Whether to shrink the buffers to fit the data. */\n    shrinkBuffersToFit?: boolean;\n}\n\n/**\n * A geometry used to batch multiple meshes with the same texture.\n * @memberof scene\n */\nexport class MeshGeometry extends Geometry\n{\n    public static defaultOptions: MeshGeometryOptions = {\n        topology: 'triangle-list',\n        shrinkBuffersToFit: false,\n    };\n\n    public batchMode: BatchMode = 'auto';\n\n    /**\n     * @param {scene.MeshGeometryOptions} options - The options of the mesh geometry.\n     */\n    constructor(options: MeshGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(positions: Float32Array, uvs: Float32Array, indices: Uint32Array);\n    constructor(...args: [MeshGeometryOptions] | [Float32Array, Float32Array, Uint32Array])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Float32Array)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'use new MeshGeometry({ positions, uvs, indices }) instead');\n            // #endif\n\n            options = {\n                positions: options,\n                uvs: args[1],\n                indices: args[2],\n            };\n        }\n\n        options = { ...MeshGeometry.defaultOptions, ...options };\n\n        const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n\n        const shrinkToFit = options.shrinkBuffersToFit;\n\n        const positionBuffer = new Buffer({\n            data: positions,\n            label: 'attribute-mesh-positions',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const uvBuffer = new Buffer({\n            data: uvs,\n            label: 'attribute-mesh-uvs',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const indexBuffer = new Buffer({\n            data: indices,\n            label: 'index-mesh-buffer',\n            shrinkToFit,\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: positionBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: uvBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n            },\n            indexBuffer,\n            topology: options.topology,\n        });\n    }\n\n    /** The positions of the mesh. */\n    get positions(): Float32Array\n    {\n        return this.attributes.aPosition.buffer.data as Float32Array;\n    }\n\n    set positions(value: Float32Array)\n    {\n        this.attributes.aPosition.buffer.data = value;\n    }\n\n    /** The UVs of the mesh. */\n    get uvs(): Float32Array\n    {\n        return this.attributes.aUV.buffer.data as Float32Array;\n    }\n\n    set uvs(value: Float32Array)\n    {\n        this.attributes.aUV.buffer.data = value;\n    }\n\n    /** The indices of the mesh. */\n    get indices(): Uint32Array\n    {\n        return this.indexBuffer.data as Uint32Array;\n    }\n\n    set indices(value: Uint32Array)\n    {\n        this.indexBuffer.data = value;\n    }\n}\n","import type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GlParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const state = particleContainerPipe.state;\n        const renderer = particleContainerPipe.renderer as WebGLRenderer;\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.resources.uTexture = container.texture._source;\n        shader.resources.uniforms = particleContainerPipe.localUniforms;\n\n        const gl = renderer.gl;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        // now lets upload and render the buffers..\n        renderer.shader.bind(shader);\n        renderer.state.set(state);\n        renderer.geometry.bind(buffer.geometry, shader.glProgram);\n\n        const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n        const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n        gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n    }\n}\n","/**\n * Generic Mask Stack data structure\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    // Check if we need to use Uint32Array\n    if (totalIndices > 65535)\n    {\n        outBuffer ||= new Uint32Array(totalIndices); // Use Uint32Array if needed\n    }\n    else\n    {\n        outBuffer ||= new Uint16Array(totalIndices);\n    }\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n","import {\n    getAttributeInfoFromFormat\n} from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { IParticle } from '../Particle';\nimport type { ParticleRendererProperty } from '../particleData';\n\n// TODO rename to update function\nexport type ParticleUpdateFunction = (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array) => void;\n\nexport function generateParticleUpdateFunction(properties: Record<string, ParticleRendererProperty>)\n{\n    return {\n        dynamicUpdate: generateUpdateFunction(properties, true),\n        staticUpdate: generateUpdateFunction(properties, false),\n    };\n}\n\nfunction generateUpdateFunction(\n    properties: Record<string, ParticleRendererProperty>,\n    dynamic: boolean\n): ParticleUpdateFunction\n{\n    const funcFragments: string[] = [];\n\n    funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n\n    let offset = 0;\n\n    for (const i in properties)\n    {\n        const property = properties[i];\n\n        if (dynamic !== property.dynamic) continue;\n\n        funcFragments.push(`offset = index + ${offset}`);\n\n        funcFragments.push(property.code);\n\n        const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n        offset += attributeInfo.stride / 4;\n    }\n\n    funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n\n    // add to the front..\n    funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n\n    const functionSource = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('ps', 'f32v', 'u32v', functionSource) as ParticleUpdateFunction;\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { IParticle } from './Particle';\nimport type { ParticleRendererProperty } from './particleData';\nimport type { ParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\n/**\n * Options for creating a ParticleBuffer.\n * @property {number} size - The size of the particle buffer.\n * @property {Record<string, ParticleRendererProperty>} properties - A record of attributes that the particle container uses.\n */\nexport interface ParticleBufferOptions\n{\n    size: number;\n    properties: Record<string, ParticleRendererProperty>;\n}\n\n/**\n * The ParticleBuffer holds the buffers and geometry for a particle container.\n * It also contains the upload functions for the static and dynamic properties.\n * @internal\n */\nexport class ParticleBuffer\n{\n    /** The buffer containing static attribute data for all elements in the batch. */\n    public staticAttributeBuffer: ViewableBuffer;\n    /** The buffer containing dynamic attribute data for all elements in the batch. */\n    public dynamicAttributeBuffer: ViewableBuffer;\n\n    private readonly _staticBuffer: Buffer;\n    private readonly _dynamicBuffer: Buffer;\n\n    /** The buffer containing index data for all elements in the batch. */\n    public indexBuffer: IndexBufferArray;\n\n    private readonly _dynamicStride: number;\n    private readonly _staticStride: number;\n\n    /** The geometry of the particle buffer. */\n    public readonly geometry: Geometry;\n\n    private _size = 0;\n    private readonly _dynamicUpload: ParticleUpdateFunction;\n    private readonly _staticUpload: ParticleUpdateFunction;\n    private readonly _generateParticleUpdateCache: Record<string, {\n        dynamicUpdate: ParticleUpdateFunction;\n        staticUpdate: ParticleUpdateFunction;\n    }> = {};\n\n    constructor(options: ParticleBufferOptions)\n    {\n        // size in sprites!\n        const size = this._size = options.size ?? 1000;\n\n        // TODO add the option to specify what is dynamic!\n        const properties = options.properties;\n\n        // in bytes!\n        let staticVertexSize = 0;\n        let dynamicVertexSize = 0;\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                // dynamic.\n                dynamicVertexSize += attributeInfo.stride;\n            }\n            else\n            {\n                // static.\n                staticVertexSize += attributeInfo.stride;\n            }\n        }\n\n        this._dynamicStride = dynamicVertexSize / 4;\n        this._staticStride = staticVertexSize / 4;\n\n        this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n        this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n\n        this.indexBuffer = createIndicesForQuads(size);\n\n        // build geometry..\n\n        const geometry = new Geometry();\n\n        let dynamicOffset = 0;\n        let staticOffset = 0;\n\n        this._staticBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'static-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        this._dynamicBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'dynamic-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._dynamicBuffer,\n                    stride: this._dynamicStride * 4,\n                    offset: dynamicOffset * 4,\n                    format: property.format,\n                });\n                dynamicOffset += attributeInfo.size;\n            }\n            else\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._staticBuffer,\n                    stride: this._staticStride * 4,\n                    offset: staticOffset * 4,\n                    format: property.format,\n                });\n                staticOffset += attributeInfo.size;\n            }\n        }\n\n        geometry.addIndex(this.indexBuffer);\n\n        const uploadFunction = this.getParticleUpdate(properties);\n\n        this._dynamicUpload = uploadFunction.dynamicUpdate;\n        this._staticUpload = uploadFunction.staticUpdate;\n\n        this.geometry = geometry;\n    }\n\n    public getParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        const key = getParticleSyncKey(properties);\n\n        if (this._generateParticleUpdateCache[key])\n        {\n            return this._generateParticleUpdateCache[key];\n        }\n\n        this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n\n        return this._generateParticleUpdateCache[key];\n    }\n\n    public generateParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        return generateParticleUpdateFunction(properties);\n    }\n\n    public update(particles: IParticle[], uploadStatic: boolean)\n    {\n        // first resize the buffers if needed!\n        // TODO resize!\n        if (particles.length > this._size)\n        {\n            uploadStatic = true;\n\n            this._size = Math.max(particles.length, (this._size * 1.5) | 0);\n\n            this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n            this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n            this.indexBuffer = createIndicesForQuads(this._size);\n\n            this.geometry.indexBuffer.setDataWithSize(\n                this.indexBuffer, this.indexBuffer.byteLength, true);\n        }\n\n        const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n\n        this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n\n        this._dynamicBuffer.setDataWithSize(\n            this.dynamicAttributeBuffer.float32View, particles.length * this._dynamicStride * 4, true);\n\n        if (uploadStatic)\n        {\n            const staticAttributeBuffer = this.staticAttributeBuffer;\n\n            this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n\n            this._staticBuffer.setDataWithSize(\n                staticAttributeBuffer.float32View, particles.length * this._staticStride * 4, true);\n        }\n    }\n\n    public destroy()\n    {\n        this._staticBuffer.destroy();\n        this._dynamicBuffer.destroy();\n        this.geometry.destroy();\n    }\n}\n\nfunction getParticleSyncKey(properties: Record<string, ParticleRendererProperty>)\n{\n    const keyGen: string[] = [];\n\n    for (const key in properties)\n    {\n        const property = properties[key];\n\n        keyGen.push(key, property.code, property.dynamic ? 'd' : 's');\n    }\n\n    return keyGen.join('_');\n}\n\n","import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\nimport wgsl from './particles.wgsl';\n\nexport class ParticleShader extends Shader\n{\n    constructor()\n    {\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment\n        });\n\n        const gpuProgram = GpuProgram.from({\n            fragment: {\n                source: wgsl,\n                entryPoint: 'mainFragment'\n            },\n            vertex: {\n                source: wgsl,\n                entryPoint: 'mainVertex'\n            }\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                // this will be replaced with the texture from the particle container\n                uTexture: Texture.WHITE.source,\n                // this will be replaced with the texture style from the particle container\n                uSampler: new TextureStyle({}),\n                // this will be replaced with the local uniforms from the particle container\n                uniforms: {\n                    uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Color(0xFFFFFF), type: 'vec4<f32>' },\n                    uRound: { value: 1, type: 'f32' },\n                    uResolution: { value: [0, 0], type: 'vec2<f32>' },\n                }\n            }\n        });\n    }\n}\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport { ParticleShader } from './shader/ParticleShader';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { ParticleContainer } from './ParticleContainer';\n\nexport interface ParticleContainerAdaptor\n{\n    execute(particleContainerPop: ParticleContainerPipe, container: ParticleContainer): void;\n}\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n * @memberof scene\n */\nexport class ParticleContainerPipe implements RenderPipe<ParticleContainer>\n{\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public defaultShader: Shader;\n\n    public adaptor: ParticleContainerAdaptor;\n    public readonly state = State.for2d();\n    public readonly renderer: Renderer;\n\n    private _gpuBufferHash: Record<number, ParticleBuffer> = Object.create(null);\n    // eslint-disable-next-line max-len\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as unknown as (renderable: Container) => void;\n\n    public readonly localUniforms = new UniformGroup({\n        uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uRound: { value: 1, type: 'f32' },\n        uResolution: { value: [0, 0], type: 'vec2<f32>' },\n    });\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     * @param adaptor\n     */\n    constructor(renderer: Renderer, adaptor: ParticleContainerAdaptor)\n    {\n        this.renderer = renderer;\n\n        this.adaptor = adaptor;\n\n        this.defaultShader = new ParticleShader();\n\n        this.state = State.for2d();\n    }\n\n    public validateRenderable(_renderable: ParticleContainer): boolean\n    {\n        // always fine :D\n        return false;\n    }\n\n    public addRenderable(renderable: ParticleContainer, instructionSet: InstructionSet)\n    {\n        this.renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add(renderable);\n    }\n\n    public getBuffers(renderable: ParticleContainer): ParticleBuffer\n    {\n        return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n    }\n\n    private _initBuffer(renderable: ParticleContainer): ParticleBuffer\n    {\n        this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n            size: renderable.particleChildren.length,\n            properties: renderable._properties,\n        });\n\n        renderable.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBufferHash[renderable.uid];\n    }\n\n    public updateRenderable(_renderable: ParticleContainer)\n    {\n        // nothing to be done here!\n\n    }\n\n    public destroyRenderable(renderable: ParticleContainer)\n    {\n        const buffer = this._gpuBufferHash[renderable.uid];\n\n        buffer.destroy();\n\n        this._gpuBufferHash[renderable.uid] = null;\n\n        renderable.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(container: ParticleContainer): void\n    {\n        const children = container.particleChildren;\n\n        if (children.length === 0)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n        const buffer = this.getBuffers(container);\n\n        container.texture ||= children[0].texture;\n\n        const state = this.state;\n\n        buffer.update(children, container._childrenDirty);\n        container._childrenDirty = false;\n\n        state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n\n        const uniforms = this.localUniforms.uniforms;\n\n        const transformationMatrix = uniforms.uTranslationMatrix;\n\n        container.worldTransform.copyTo(transformationMatrix);\n\n        transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n\n        uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n        uniforms.uRound = renderer._roundPixels | container._roundPixels;\n\n        color32BitToUniform(\n            container.groupColorAlpha,\n            uniforms.uColor,\n            0\n        );\n\n        this.adaptor.execute(this, container);\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        if (this.defaultShader)\n        {\n            this.defaultShader.destroy();\n            this.defaultShader = null;\n        }\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\n\nexport class GlParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer, new GlParticleContainerAdaptor());\n    }\n}\n","import type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GpuParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const renderer = particleContainerPipe.renderer as WebGPURenderer;\n\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n\n        shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n\n        const state = particleContainerPipe.state;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        renderer.encoder.draw({\n            geometry: buffer.geometry,\n            shader: container.shader || particleContainerPipe.defaultShader,\n            state,\n            size: container.particleChildren.length * 6,\n        });\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\n\nexport class GpuParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        super(renderer, new GpuParticleContainerAdaptor());\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe';\n\n// NOTE: this is the first occurrence of needing both gl and gpu pipes in the same file\n// This could cause some issues with tree shaking in the future.\n// Right now these two files do not import anything specific for a renderer, so is not an issue for now.\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `PlaneGeometry` instances.\n * ```js\n * const planeGeometry = new PlaneGeometry({\n *    width: 100,\n *    height: 100,\n *    verticesX: 10,\n *    verticesY: 10,\n * });\n * ```\n * @see {@link scene.PlaneGeometry}\n * @memberof scene\n */\nexport interface PlaneGeometryOptions\n{\n    /** Width of plane */\n    width?: number;\n    /** Height of plane */\n    height?: number;\n    /** Number of vertices on x-axis */\n    verticesX?: number;\n    /** Number of vertices on y-axis */\n    verticesY?: number;\n}\n\n/**\n * The PlaneGeometry allows you to draw a 2d plane\n * @memberof scene\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    /** The number of vertices on x-axis */\n    public verticesX: number;\n    /** The number of vertices on y-axis */\n    public verticesY: number;\n    /** The width of plane */\n    public width: number;\n    /** The height of plane */\n    public height: number;\n\n    /**\n     * @param {PlaneGeometryOptions} options - Options to be applied to plane geometry\n     */\n    constructor(options: PlaneGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(width?: number, height?: number, verticesX?: number, verticesY?: number);\n    constructor(...args: [PlaneGeometryOptions?] | [number?, number?, number?, number?])\n    {\n        super({});\n\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead');\n            // #endif\n\n            options = {\n                width: options,\n                height: args[1],\n                verticesX: args[2],\n                verticesY: args[3],\n            };\n        }\n\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options - Options to be applied to plane geometry\n     */\n    public build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry';\n\n/**\n * Options for the NineSliceGeometry.\n * @memberof scene\n */\nexport interface NineSliceGeometryOptions\n{\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    width?: number\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    height?: number\n    /** The original width of the texture */\n    originalWidth?: number\n    /** The original height of the texture */\n    originalHeight?: number\n    /** The width of the left column. */\n    leftWidth?: number\n    /** The height of the top row. */\n    topHeight?: number\n    /** The width of the right column. */\n    rightWidth?: number\n    /** The height of the bottom row. */\n    bottomHeight?: number\n}\n\n/**\n * The NineSliceGeometry class allows you to create a NineSlicePlane object.\n * @memberof scene\n */\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    /** The default options for the NineSliceGeometry. */\n    public static defaultOptions: NineSliceGeometryOptions = {\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        width: 100,\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        height: 100,\n        /** The width of the left column. */\n        leftWidth: 10,\n        /** The height of the top row. */\n        topHeight: 10,\n        /** The width of the right column. */\n        rightWidth: 10,\n        /** The height of the bottom row. */\n        bottomHeight: 10,\n\n        /** The original width of the texture */\n        originalWidth: 100,\n        /** The original height of the texture */\n        originalHeight: 100,\n    };\n\n    public _leftWidth: number;\n    public _rightWidth: number;\n    public _topHeight: number;\n    public _bottomHeight: number;\n\n    private _originalWidth: number;\n    private _originalHeight: number;\n\n    constructor(options: NineSliceGeometryOptions = {})\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    /**\n     * Updates the NineSliceGeometry with the options.\n     * @param options - The options of the NineSliceGeometry.\n     */\n    public update(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        this.updateUvs();\n        this.updatePositions();\n    }\n\n    /** Updates the positions of the vertices. */\n    public updatePositions()\n    {\n        const positions = this.positions;\n\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this.width > w ? 1.0 : this.width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this.height > h ? 1.0 : this.height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n        positions[17] = positions[19] = positions[21] = positions[23] = this.height - (this._bottomHeight * scale);\n        positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n\n        positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n        positions[4] = positions[12] = positions[20] = positions[28] = this.width - (this._rightWidth * scale);\n        positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    /** Updates the UVs of the vertices. */\n    public updateUvs()\n    {\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { NineSliceSprite } from './NineSliceSprite';\n\nexport class NineSliceSpritePipe implements RenderPipe<NineSliceSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'nineSliceSprite',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private readonly _gpuSpriteHash: Record<number, BatchableMesh> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuSpriteHash');\n    }\n\n    public addRenderable(sprite: NineSliceSprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: NineSliceSprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: NineSliceSprite): boolean\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        return !gpuSprite._batcher.checkAndUpdateTexture(\n            gpuSprite,\n            sprite._texture\n        );\n    }\n\n    public destroyRenderable(sprite: NineSliceSprite)\n    {\n        const batchableMesh = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableMesh.geometry as PoolItem);\n        BigPool.return(batchableMesh as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n\n        sprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _updateBatchableSprite(sprite: NineSliceSprite, batchableSprite: BatchableMesh)\n    {\n        (batchableSprite.geometry as NineSliceGeometry)\n            .update(sprite);\n\n        // = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        const batchableMesh = BigPool.get(BatchableMesh);\n\n        batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n        batchableMesh.renderable = sprite;\n        batchableMesh.transform = sprite.groupTransform;\n        batchableMesh.texture = sprite._texture;\n        batchableMesh.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableMesh;\n\n        // if the sprite has not been updated by the view, we need to update the batchable mesh now.\n        if (!sprite.didViewUpdate)\n        {\n            this._updateBatchableSprite(sprite, batchableMesh);\n        }\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', this._destroyRenderableBound);\n\n        return batchableMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            const batchableMesh = this._gpuSpriteHash[i];\n\n            batchableMesh.geometry.destroy();\n        }\n\n        (this._gpuSpriteHash as null) = null;\n        (this._renderer as null) = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe';\n\nextensions.add(NineSliceSpritePipe);\n","export const tilingBit = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    }\n\n};\n\nexport const tilingBitGl = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `,\n        main: /* glsl */`\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `,\n        main: /* glsl */`\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry';\n\nexport class QuadGeometry extends MeshGeometry\n{\n    constructor()\n    {\n        super({\n            positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n        });\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Container } from '../container/Container';\nimport type { TilingSprite } from './TilingSprite';\n\ninterface RenderableData\n{\n    canBatch: boolean;\n    renderable: TilingSprite\n    batchableMesh?: BatchableMesh;\n    geometry?: MeshGeometry;\n    shader?: TilingSpriteShader;\n}\n\nconst sharedQuad = new QuadGeometry();\n\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private readonly _state: State = State.default2d;\n    private readonly _tilingSpriteDataHash: Record<number, RenderableData> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_tilingSpriteDataHash');\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                renderable.texture\n            );\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite.didViewUpdate)\n            {\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.renderable = tilingSprite;\n                batchableMesh.transform = tilingSprite.groupTransform;\n                batchableMesh.texture = tilingSprite._texture;\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: this._state,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite.didViewUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh._batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite.didViewUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n    }\n\n    public destroyRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        tilingSpriteData.batchableMesh = null;\n\n        tilingSpriteData.shader?.destroy();\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = null;\n\n        tilingSprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): RenderableData\n    {\n        return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): RenderableData\n    {\n        const geometry = new MeshGeometry({\n            indices: sharedQuad.indices,\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = {\n            canBatch: true,\n            renderable: tilingSprite,\n            geometry,\n        };\n\n        tilingSprite.on('destroyed', this._destroyRenderableBound);\n\n        return this._tilingSpriteDataHash[tilingSprite.uid];\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        for (const i in this._tilingSpriteDataHash)\n        {\n            this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n        }\n\n        (this._tilingSpriteDataHash as null) = null;\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite.applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { TypedArray } from '../../../rendering/renderers/shared/buffer/Buffer';\n\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n","import type { TilingSprite } from '../TilingSprite';\n\nexport function setPositions(tilingSprite: TilingSprite, positions: Float32Array)\n{\n    const anchorX = tilingSprite.anchor.x;\n    const anchorY = tilingSprite.anchor.y;\n\n    positions[0] = -anchorX * tilingSprite.width;\n    positions[1] = -anchorY * tilingSprite.height;\n    positions[2] = (1 - anchorX) * tilingSprite.width;\n    positions[3] = -anchorY * tilingSprite.height;\n    positions[4] = (1 - anchorX) * tilingSprite.width;\n    positions[5] = (1 - anchorY) * tilingSprite.height;\n    positions[6] = -anchorX * tilingSprite.width;\n    positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { TilingSpritePipe } from './TilingSpritePipe';\n\nextensions.add(TilingSpritePipe);\n","import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n    public topology: Topology = 'triangle-list';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: Container;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n}\n","// TODO eventually we should not use this bit, but instead use the localUniformBit\n// have the MSDF bit be merged in with the localUniformBit\n\nexport const localUniformMSDFBit = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `,\n        main: /* wgsl */` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n\n    }\n};\n\nexport const localUniformMSDFBitGl = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform float uDistance;\n         `,\n        main: /* glsl */` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n\n    }\n};\n","export const mSDFBit = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* wgsl */`\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `,\n    }\n\n};\n\nexport const mSDFBitGl = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* glsl */`\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `,\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport {\n    generateTextureBatchBit,\n    generateTextureBatchBitGl\n} from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class SdfShader extends Shader\n{\n    constructor()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uDistance: { value: 4, type: 'f32' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const maxTextures = getMaxTexturesPerBatch();\n\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(maxTextures),\n                localUniformMSDFBit,\n                mSDFBit,\n                roundPixelsBit\n            ]\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformMSDFBitGl,\n                mSDFBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n}\n","import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\n/** @memberof text */\nexport interface CharData\n{\n    /** Unique id of character */\n    id: number;\n    /** x-offset to apply when rendering character */\n    xOffset: number;\n    /** y-offset to apply when rendering character. */\n    yOffset: number;\n    /** Advancement to apply to next character. */\n    xAdvance: number;\n    /** The kerning values for this character. */\n    kerning: Record<string, number>;\n    /** The texture of the character. */\n    texture?: Texture;\n}\n\n/**\n * The raw data of a character in a bitmap font.\n * @memberof text\n */\nexport interface RawCharData extends Omit<CharData, 'texture'>\n{\n    /** The page of the font texture that the character is on. */\n    page: number;\n    /** The x position of the character in the page. */\n    x: number;\n    /** The y position of the character in the page. */\n    y: number;\n    /** The width of the character in the page. */\n    width: number;\n    /** The height of the character in the page. */\n    height: number;\n    /** The letter of the character. */\n    letter: string;\n}\n\n/**\n * The raw data of a bitmap font.\n * @memberof text\n */\nexport interface BitmapFontData\n{\n    /** The offset of the font face from the baseline. */\n    baseLineOffset: number;\n    /** The map of characters by character code. */\n    chars: Record<string, RawCharData>;\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    pages: {\n        /** Unique id for bitmap texture */\n        id: number;\n        /** File name */\n        file: string\n    }[];\n    /** The line-height of the font face in pixels. */\n    lineHeight: number;\n    /** The size of the font face in pixels. */\n    fontSize: number;\n    /** The name of the font face. */\n    fontFamily: string;\n    /** The range and type of the distance field for this font. */\n    distanceField?: {\n        /** Type of distance field */\n        type: 'sdf' | 'msdf' | 'none';\n        /** Range of the distance field in pixels */\n        range: number;\n    };\n}\n\ninterface BitmapFontEvents<Type>\n{\n    destroy: [Type];\n}\n\n/**\n * An abstract representation of a bitmap font.\n * @memberof text\n */\nexport abstract class AbstractBitmapFont<FontType>\n    extends EventEmitter<BitmapFontEvents<FontType>>\n    implements Omit<BitmapFontData, 'chars' | 'pages' | 'fontSize'>\n{\n    /** The map of characters by character code. */\n    public readonly chars: Record<string, CharData> = Object.create(null);\n\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    public readonly lineHeight: BitmapFontData['lineHeight'] = 0;\n\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    public readonly fontFamily: BitmapFontData['fontFamily'] = '';\n    /** The metrics of the font face. */\n    public readonly fontMetrics: FontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    public readonly baseLineOffset: BitmapFontData['baseLineOffset'] = 0;\n    /** The range and type of the distance field for this font. */\n    public readonly distanceField: BitmapFontData['distanceField'] = { type: 'none', range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pages: { texture: Texture }[] = [];\n    /** should the fill for this font be applied as a tint to the text. */\n    public applyFillAsTint = true;\n\n    /** The size of the font face in pixels. */\n    public readonly baseMeasurementFontSize: number = 100;\n    protected baseRenderedFontSize = 100;\n\n    /**\n     * The name of the font face.\n     * @deprecated since 8.0.0 Use `fontFamily` instead.\n     */\n    public get font(): BitmapFontData['fontFamily']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.');\n        // #endif\n\n        return this.fontFamily;\n    }\n\n    /**\n     * The map of base page textures (i.e., sheets of glyphs).\n     * @deprecated since 8.0.0 Use `pages` instead.\n     */\n    public get pageTextures(): AbstractBitmapFont<FontType>['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    /**\n     * The size of the font face in pixels.\n     * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n     */\n    public get size(): BitmapFontData['fontSize']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.');\n        // #endif\n\n        return this.fontMetrics.fontSize;\n    }\n\n    /**\n     * The kind of distance field for this font or \"none\".\n     * @deprecated since 8.0.0 Use `distanceField.type` instead.\n     */\n    public get distanceFieldRange(): NonNullable<BitmapFontData['distanceField']>['range']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.');\n        // #endif\n\n        return this.distanceField.range;\n    }\n\n    /**\n     * The range of the distance field in pixels.\n     * @deprecated since 8.0.0 Use `distanceField.range` instead.\n     */\n    public get distanceFieldType(): NonNullable<BitmapFontData['distanceField']>['type']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.');\n        // #endif\n\n        return this.distanceField.type;\n    }\n\n    public destroy(destroyTextures = false): void\n    {\n        this.emit('destroy', this as unknown as FontType);\n\n        this.removeAllListeners();\n\n        for (const i in this.chars)\n        {\n            // texture may not exist if the char is \" \", \\n, \\r, or \\t.\n            this.chars[i].texture?.destroy();\n        }\n\n        (this.chars as null) = null;\n\n        if (destroyTextures)\n        {\n            this.pages.forEach((page) => page.texture.destroy(true));\n            (this.pages as any) = null;\n        }\n    }\n}\n","/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\n\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Skip unexpected 'empty set' check at end\n    if (chars === '')\n    {\n        return [];\n    }\n\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n            if (item[0].length === 0 || item[1].length === 0)\n            {\n                throw new Error('[BitmapFont]: Invalid character delimiter.');\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        else\n        {\n            result.push(...Array.from(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n","import { Color } from '../../color/Color';\nimport { Rectangle } from '../../maths/shapes/Rectangle';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle';\nimport { TextStyle } from '../text/TextStyle';\nimport { AbstractBitmapFont } from './AbstractBitmapFont';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { ICanvasRenderingContext2D } from '../../environment/canvas/ICanvasRenderingContext2D';\nimport type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\nexport interface DynamicBitmapFontOptions\n{\n    style: TextStyle\n    skipKerning?: boolean\n    resolution?: number\n    padding?: number\n    overrideFill?: boolean\n    overrideSize?: boolean\n    textureSize?: number\n    mipmap?: boolean\n}\n\n/**\n * A BitmapFont that generates its glyphs dynamically.\n * @memberof text\n * @ignore\n */\nexport class DynamicBitmapFont extends AbstractBitmapFont<DynamicBitmapFont>\n{\n    public static defaultOptions: DynamicBitmapFontOptions = {\n        textureSize: 512,\n        style: new TextStyle(),\n        mipmap: true,\n    };\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    public resolution = 1;\n    /** The pages of the font. */\n    public override readonly pages: {canvasAndContext?: CanvasAndContext, texture: Texture}[] = [];\n\n    private readonly _padding: number = 0;\n    private readonly _measureCache: Record<string, number> = Object.create(null);\n    private _currentChars: string[] = [];\n    private _currentX = 0;\n    private _currentY = 0;\n    private _currentPageIndex = -1;\n    private readonly _style: TextStyle;\n    private readonly _skipKerning: boolean = false;\n    private readonly _textureSize: number;\n    private readonly _mipmap: boolean;\n\n    /**\n     * @param options - The options for the dynamic bitmap font.\n     */\n    constructor(options: DynamicBitmapFontOptions)\n    {\n        super();\n\n        const dynamicOptions = { ...DynamicBitmapFont.defaultOptions, ...options };\n\n        this._textureSize = dynamicOptions.textureSize;\n        this._mipmap = dynamicOptions.mipmap;\n\n        const style = dynamicOptions.style.clone();\n\n        if (dynamicOptions.overrideFill)\n        {\n            // assuming no shape fill..\n            style._fill.color = 0xffffff;\n            style._fill.alpha = 1;\n            style._fill.texture = Texture.WHITE;\n            style._fill.fill = null;\n        }\n\n        this.applyFillAsTint = dynamicOptions.overrideFill;\n\n        const requestedFontSize = style.fontSize;\n\n        // adjust font size to match the base measurement size\n        style.fontSize = this.baseMeasurementFontSize;\n\n        const font = fontStringFromTextStyle(style);\n\n        if (dynamicOptions.overrideSize)\n        {\n            if (style._stroke)\n            {\n                // we want the stroke to fit the size of the requested text, so we need to scale it\n                // accordingly (eg font size 20, with stroke 10 - stroke is 50% of size,\n                // as dynamic font is size 100, the stroke should be adjusted to 50 to make it look right)\n                style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n            }\n        }\n        else\n        {\n            style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n        }\n\n        this._style = style;\n        this._skipKerning = dynamicOptions.skipKerning ?? false;\n        this.resolution = dynamicOptions.resolution ?? 1;\n        this._padding = dynamicOptions.padding ?? 4;\n\n        (this.fontMetrics as FontMetrics) = CanvasTextMetrics.measureFont(font);\n        (this.lineHeight as number) = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n    }\n\n    public ensureCharacters(chars: string): void\n    {\n        const charList = resolveCharacters(chars)\n            .filter((char) => !this._currentChars.includes(char))\n            .filter((char, index, self) => self.indexOf(char) === index);\n        // filter returns..\n\n        if (!charList.length) return;\n\n        this._currentChars = [...this._currentChars, ...charList];\n\n        let pageData;\n\n        if (this._currentPageIndex === -1)\n        {\n            pageData = this._nextPage();\n        }\n        else\n        {\n            pageData = this.pages[this._currentPageIndex];\n        }\n\n        let { canvas, context } = pageData.canvasAndContext;\n        let textureSource = pageData.texture.source;\n\n        const style = this._style;\n\n        let currentX = this._currentX;\n        let currentY = this._currentY;\n\n        const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n        const padding = this._padding * fontScale;\n\n        let maxCharHeight = 0;\n        let skipTexture = false;\n\n        const maxTextureWidth = canvas.width / this.resolution;\n        const maxTextureHeight = canvas.height / this.resolution;\n\n        for (let i = 0; i < charList.length; i++)\n        {\n            const char = charList[i];\n\n            const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n\n            // override the line height.. we want this to be the glyps height\n            // not the user specified one.\n            metrics.lineHeight = metrics.height;\n\n            const width = metrics.width * fontScale;\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            const height = (metrics.height) * fontScale;\n\n            const paddedWidth = textureGlyphWidth + (padding * 2);\n            const paddedHeight = height + (padding * 2);\n\n            skipTexture = false;\n            // don't let empty characters count towards the maxCharHeight\n            if (char !== '\\n' && char !== '\\r' && char !== '\\t' && char !== ' ')\n            {\n                skipTexture = true;\n                maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));// / 1.5;\n            }\n\n            if (currentX + paddedWidth > maxTextureWidth)\n            {\n                currentY += maxCharHeight;\n\n                // reset the line x and height..\n                maxCharHeight = paddedHeight;\n                currentX = 0;\n\n                if (currentY + maxCharHeight > maxTextureHeight)\n                {\n                    textureSource.update();\n\n                    const pageData = this._nextPage();\n\n                    canvas = pageData.canvasAndContext.canvas;\n                    context = pageData.canvasAndContext.context;\n                    textureSource = pageData.texture.source;\n\n                    currentY = 0;\n                }\n            }\n\n            const xAdvance = (width / fontScale)\n                - (style.dropShadow?.distance ?? 0)\n                - (style._stroke?.width ?? 0);\n\n            // This is in coord space of the measurements.. not the texture\n            this.chars[char] = {\n                id: char.codePointAt(0),\n                xOffset: -this._padding,\n                yOffset: -this._padding,\n                xAdvance,\n                kerning: {},\n            };\n\n            if (skipTexture)\n            {\n                this._drawGlyph(\n                    context,\n                    metrics,\n                    currentX + padding,\n                    currentY + padding,\n                    fontScale,\n                    style,\n                );\n\n                const px = textureSource.width * fontScale;\n                const py = textureSource.height * fontScale;\n\n                const frame = new Rectangle(\n                    ((currentX) / px) * textureSource.width,\n                    ((currentY) / py) * textureSource.height,\n                    ((paddedWidth) / px) * textureSource.width,\n                    ((paddedHeight) / py) * textureSource.height,\n                );\n\n                this.chars[char].texture = new Texture({\n                    source: textureSource,\n                    frame,\n                });\n\n                currentX += Math.ceil(paddedWidth);\n            }\n\n            // now add it to the font data..\n        }\n\n        textureSource.update();\n\n        this._currentX = currentX;\n        this._currentY = currentY;\n\n        // now apply kerning..\n        this._skipKerning && this._applyKerning(charList, context);\n    }\n\n    /**\n     * @deprecated since 8.0.0\n     * The map of base page textures (i.e., sheets of glyphs).\n     */\n    public override get pageTextures(): DynamicBitmapFont['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    private _applyKerning(newChars: string[], context: ICanvasRenderingContext2D): void\n    {\n        const measureCache = this._measureCache;\n\n        for (let i = 0; i < newChars.length; i++)\n        {\n            const first = newChars[i];\n\n            for (let j = 0; j < this._currentChars.length; j++)\n            {\n                // first go through new char being first\n                const second = this._currentChars[j];\n\n                let c1 = measureCache[first];\n\n                if (!c1) c1 = measureCache[first] = context.measureText(first).width;\n\n                let c2 = measureCache[second];\n\n                if (!c2) c2 = measureCache[second] = context.measureText(second).width;\n\n                let total = context.measureText(first + second).width;\n                let amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[first].kerning[second] = amount;\n                }\n\n                // then go through new char being second\n                total = context.measureText(first + second).width;\n                amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[second].kerning[first] = amount;\n                }\n            }\n        }\n    }\n\n    private _nextPage(): {canvasAndContext: CanvasAndContext, texture: Texture}\n    {\n        this._currentPageIndex++;\n\n        const textureResolution = this.resolution;\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n            this._textureSize,\n            this._textureSize,\n            textureResolution\n        );\n\n        this._setupContext(canvasAndContext.context, this._style, textureResolution);\n\n        const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n        const texture = new Texture({\n            source: new ImageSource({\n                resource: canvasAndContext.canvas,\n                resolution,\n                alphaMode: 'premultiply-alpha-on-upload',\n                autoGenerateMipmaps: this._mipmap,\n            }),\n\n        });\n\n        const pageData = {\n            canvasAndContext,\n            texture,\n        };\n\n        this.pages[this._currentPageIndex] = pageData;\n\n        return pageData;\n    }\n\n    // canvas style!\n    private _setupContext(context: ICanvasRenderingContext2D, style: TextStyle, resolution: number): void\n    {\n        style.fontSize = this.baseRenderedFontSize;\n        context.scale(resolution, resolution);\n        context.font = fontStringFromTextStyle(style);\n        style.fontSize = this.baseMeasurementFontSize;\n        context.textBaseline = style.textBaseline;\n\n        const stroke = style._stroke;\n        const strokeThickness = stroke?.width ?? 0;\n\n        if (stroke)\n        {\n            context.lineWidth = strokeThickness;\n            context.lineJoin = stroke.join;\n            context.miterLimit = stroke.miterLimit;\n\n            // TODO prolly cache this??\n            context.strokeStyle = getCanvasFillStyle(stroke, context);\n        }\n\n        if (style._fill)\n        {\n            // set canvas text styles\n            context.fillStyle = getCanvasFillStyle(style._fill, context);\n        }\n\n        if (style.dropShadow)\n        {\n            const shadowOptions = style.dropShadow;\n            const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n\n            const dropShadowBlur = shadowOptions.blur * resolution;\n            const dropShadowDistance = shadowOptions.distance * resolution;\n\n            context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n            context.shadowBlur = dropShadowBlur;\n            context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n            context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n        }\n        else\n        {\n            context.shadowColor = 'black';\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n    }\n\n    private _drawGlyph(\n        context: ICanvasRenderingContext2D,\n        metrics: CanvasTextMetrics,\n        x: number,\n        y: number,\n        fontScale: number,\n        style: TextStyle\n    ): void\n    {\n        const char = metrics.text;\n        const fontProperties = metrics.fontProperties;\n        const stroke = style._stroke;\n\n        const strokeThickness = (stroke?.width ?? 0) * fontScale;\n\n        const tx = x + (strokeThickness / 2);\n        const ty = y - (strokeThickness / 2);\n\n        const descent = fontProperties.descent * fontScale;\n        const lineHeight = metrics.lineHeight * fontScale;\n\n        if (style.stroke && strokeThickness)\n        {\n            context.strokeText(char, tx, ty + lineHeight - descent);\n        }\n\n        if (style._fill)\n        {\n            context.fillText(char, tx, ty + lineHeight - descent);\n        }\n    }\n\n    public override destroy(): void\n    {\n        super.destroy();\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { canvasAndContext, texture } = this.pages[i];\n\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n            texture.destroy(true);\n        }\n\n        (this.pages as null) = null;\n    }\n}\n","import type { TextStyle } from '../../text/TextStyle';\nimport type { AbstractBitmapFont } from '../AbstractBitmapFont';\n\nexport interface BitmapTextLayoutData\n{\n    width: number;\n    height: number;\n    scale: number;\n    offsetY: number;\n    lines: {\n        width: number\n        charPositions: number[],\n        chars: string[],\n        // / spaces: number\n        spaceWidth: number\n        spacesIndex: number[]\n    }[];\n}\n\nexport function getBitmapTextLayout(\n    chars: string[],\n    style: TextStyle,\n    font: AbstractBitmapFont<any>,\n    trimEnd: boolean\n): BitmapTextLayoutData\n{\n    const layoutData: BitmapTextLayoutData = {\n        width: 0,\n        height: 0,\n        offsetY: 0,\n        scale: style.fontSize / font.baseMeasurementFontSize,\n        lines: [{\n            width: 0,\n            charPositions: [] as number[],\n            spaceWidth: 0,\n            spacesIndex: [],\n            chars: [],\n        }]\n    };\n\n    layoutData.offsetY = font.baseLineOffset;\n\n    let currentLine = layoutData.lines[0];\n\n    let previousChar: string = null;\n    let firstWord = true;\n    //    let spaceCount = 0;\n\n    const currentWord = {\n        spaceWord: false,\n        width: 0,\n        start: 0,\n        index: 0, // use index to not modify the array as we use it a lot!\n        positions: [] as number[],\n        chars: [] as string[],\n    };\n\n    const nextWord = (word: typeof currentWord) =>\n    {\n        const start = currentLine.width;\n\n        for (let j = 0; j < currentWord.index; j++)\n        {\n            const position = word.positions[j];\n\n            currentLine.chars.push(word.chars[j]);\n            currentLine.charPositions.push(position + start);\n        }\n\n        currentLine.width += word.width;\n\n        firstWord = false;\n\n        // reset the word..\n        currentWord.width = 0;\n        currentWord.index = 0;\n        currentWord.chars.length = 0;\n\n        // spaceCount = 0;\n    };\n\n    const nextLine = () =>\n    {\n        let index = currentLine.chars.length - 1;\n\n        if (trimEnd)\n        {\n            let lastChar = currentLine.chars[index];\n\n            while (lastChar === ' ')\n            {\n                currentLine.width -= font.chars[lastChar].xAdvance;\n                lastChar = currentLine.chars[--index];\n            }\n        }\n\n        layoutData.width = Math.max(layoutData.width, currentLine.width);\n\n        currentLine = {\n            width: 0,\n            charPositions: [],\n            chars: [],\n            spaceWidth: 0,\n            spacesIndex: [],\n        };\n\n        firstWord = true;\n        layoutData.lines.push(currentLine);\n        layoutData.height += font.lineHeight;\n    };\n\n    const scale = font.baseMeasurementFontSize / style.fontSize;\n\n    const adjustedLetterSpacing = style.letterSpacing * scale;\n    const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n\n    // loop an extra time to force a line break..\n    for (let i = 0; i < chars.length + 1; i++)\n    {\n        let char: string;\n\n        const isEnd = i === chars.length;\n\n        if (!isEnd)\n        {\n            char = chars[i];\n        }\n\n        const charData = font.chars[char] || font.chars[' '];\n\n        const isSpace = (/(?:\\s)/).test(char);\n        const isWordBreak = isSpace || char === '\\r' || char === '\\n' || isEnd;\n\n        // spaceCount++;\n        // wasSpace = isSpace;\n\n        if (isWordBreak)\n        {\n            const addWordToNextLine = !firstWord\n                && style.wordWrap\n                && (currentLine.width + currentWord.width - adjustedLetterSpacing) > adjustedWordWrapWidth;\n\n            if (addWordToNextLine)\n            {\n                nextLine();\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n            else\n            {\n                currentWord.start = currentLine.width;\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                if (currentLine.width !== 0)\n                {\n                    nextLine();\n                }\n            }\n            else if (!isEnd)\n            {\n                const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n\n                currentLine.width += spaceWidth;\n\n                currentLine.spaceWidth = spaceWidth;\n                currentLine.spacesIndex.push(currentLine.charPositions.length);\n                currentLine.chars.push(char);\n\n                // spaceCount++;\n            }\n        }\n        else\n        {\n            const kerning = charData.kerning[previousChar] || 0;\n\n            const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n\n            currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n            currentWord.chars.push(char);\n\n            currentWord.width += nextCharWidth;\n        }\n\n        previousChar = char;\n        // lastChar = char;\n    }\n\n    nextLine();\n\n    if (style.align === 'center')\n    {\n        alignCenter(layoutData);\n    }\n    else if (style.align === 'right')\n    {\n        alignRight(layoutData);\n    }\n    else if (style.align === 'justify')\n    {\n        alignJustify(layoutData);\n    }\n\n    return layoutData;\n}\n\nfunction alignCenter(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width / 2) - (line.width / 2));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignRight(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width) - (line.width));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignJustify(measurementData: BitmapTextLayoutData)\n{\n    const width = measurementData.width;\n\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n\n        let indy = 0;\n        let spaceIndex = line.spacesIndex[indy++];\n\n        let offset = 0;\n\n        const totalSpaces = line.spacesIndex.length;\n\n        const newSpaceWidth = (width - line.width) / totalSpaces;\n\n        const spaceWidth = newSpaceWidth;\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            if (j === spaceIndex)\n            {\n                spaceIndex = line.spacesIndex[indy++];\n\n                offset += spaceWidth;\n            }\n\n            line.charPositions[j] += offset;\n        }\n    }\n}\n","import { Cache } from '../../assets/cache/Cache';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { DynamicBitmapFont } from './DynamicBitmapFont';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { TextStyleOptions } from '../text/TextStyle';\nimport type { BitmapFont } from './BitmapFont';\nimport type { BitmapTextLayoutData } from './utils/getBitmapTextLayout';\n\nlet fontCount = 0;\n\n/**\n *\n * The options for installing a new BitmapFont. Once installed the font will be available for use in the BitmapText.\n * It can be accessed by the `fontFamily` property of the TextStyle.\n *\n * Install a new BitmapFont will create the characters provided for the font and store them in the cache.\n * But don't worry, if a character is requested that hasn't been generated yet, it will be created on the fly.\n * @memberof text\n */\nexport interface BitmapFontInstallOptions\n{\n    /** the name of the font, this will be the name you use in the fontFamily of text style to access this font */\n    name?: string;\n    /**\n     * Characters included in the font set. You can also use ranges.\n     * For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n    /**\n     * Render resolution for glyphs.\n     * @default 1\n     */\n    resolution?: number;\n    /**\n     * Padding between glyphs on texture atlas. Lower values could mean more visual artifacts\n     * and bleeding from other glyphs, larger values increase the space required on the texture.\n     * @default 4\n     */\n    padding?: number;\n    /**\n     * Skip generation of kerning information for the BitmapFont.\n     * If true, this could potentially increase the performance, but may impact the rendered text appearance.\n     * @default false\n     */\n    skipKerning?: boolean;\n    /** Style options to render with BitmapFont. */\n    style?: TextStyle | TextStyleOptions;\n}\n\n/**\n * The BitmapFontManager is a helper that exists to install and uninstall fonts\n * into the cache for BitmapText objects.\n * @memberof text\n * @name BitmapFontManager\n * @example\n * import { BitmapFontManager, BitmapText } from 'pixi.js';\n *\n * BitmapFontManager.install({\n *   name: 'TitleFont',\n *   style: {}\n * });\n *\n * const title = new BitmapText({ text: 'This is the title', style: { fontFamily: 'TitleFont' }});\n */\nclass BitmapFontManagerClass\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public readonly ASCII = [[' ', '~']];\n\n    /** Default options for installing a new BitmapFont. */\n    public defaultOptions: Omit<BitmapFontInstallOptions, 'style'> = {\n        chars: this.ALPHANUMERIC,\n        resolution: 1,\n        padding: 4,\n        skipKerning: false,\n    };\n\n    /**\n     * Get a font for the specified text and style.\n     * @param text - The text to get the font for\n     * @param style - The style to use\n     */\n    public getFont(text: string, style: TextStyle): BitmapFont\n    {\n        let fontFamilyKey = `${style.fontFamily as string}-bitmap`;\n        let overrideFill = true;\n\n        // assuming there is no texture we can use a tint!\n        if (style._fill.fill && !style._stroke)\n        {\n            fontFamilyKey += style._fill.fill.styleKey;\n            overrideFill = false;\n        }\n        else if (style._stroke || style.dropShadow)\n        {\n            // if there is a stoke, we need to use the style key as this the font generated cannot be tinted\n            // due to the fact the font has at least two colors.\n            let key = style.styleKey;\n\n            // remove the font size..\n            key = key.substring(0, key.lastIndexOf('-'));\n\n            fontFamilyKey = `${key}-bitmap`;\n            overrideFill = false;\n        }\n\n        // first get us the the right font...\n        if (!Cache.has(fontFamilyKey))\n        {\n            const fnt = new DynamicBitmapFont({\n                style,\n                overrideFill,\n                overrideSize: true,\n                ...this.defaultOptions,\n            });\n\n            fontCount++;\n\n            // warn users if they have created too many dynamic fonts\n            if (fontCount > 50)\n            {\n                // eslint-disable-next-line max-len\n                warn('BitmapText', `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n            }\n\n            fnt.once('destroy', () =>\n            {\n                fontCount--;\n                Cache.remove(fontFamilyKey);\n            });\n\n            Cache.set(\n                fontFamilyKey as string,\n                fnt\n            );\n        }\n\n        const dynamicFont = Cache.get(fontFamilyKey);\n\n        (dynamicFont as DynamicBitmapFont).ensureCharacters?.(text);\n\n        return dynamicFont;\n    }\n\n    /**\n     * Get the layout of a text for the specified style.\n     * @param text - The text to get the layout for\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public getLayout(text: string, style: TextStyle, trimEnd: boolean = true): BitmapTextLayoutData\n    {\n        const bitmapFont = this.getFont(text, style);\n\n        return getBitmapTextLayout([...text], style, bitmapFont, trimEnd);\n    }\n\n    /**\n     * Measure the text using the specified style.\n     * @param text - The text to measure\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public measureText(\n        text: string,\n        style: TextStyle,\n        trimEnd: boolean = true\n    ): { width: number; height: number; scale: number; offsetY: number }\n    {\n        return this.getLayout(text, style, trimEnd);\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFontManager, BitmapText } from 'pixi.js';\n     *\n     * BitmapFontManager.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public install(options: BitmapFontInstallOptions): BitmapFont;\n    /** @deprecated since 7.0.0 */\n    public install(name: string, style?: TextStyle | TextStyleOptions, options?: BitmapFontInstallOptions): BitmapFont;\n    // eslint-disable-next-line max-len\n    public install(...args: [string | BitmapFontInstallOptions, (TextStyle | TextStyleOptions)?, BitmapFontInstallOptions?]): BitmapFont\n    {\n        let options = args[0] as BitmapFontInstallOptions;\n\n        if (typeof options === 'string')\n        {\n            options = {\n                name: options,\n                style: args[1],\n                chars: args[2]?.chars,\n                resolution: args[2]?.resolution,\n                padding: args[2]?.padding,\n                skipKerning: args[2]?.skipKerning,\n            } as BitmapFontInstallOptions;\n\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})');\n            // #endif\n        }\n\n        const name = options?.name;\n\n        if (!name)\n        {\n            throw new Error('[BitmapFontManager] Property `name` is required.');\n        }\n\n        options = { ...this.defaultOptions, ...options };\n\n        const textStyle = options.style;\n\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const overrideFill = style._fill.fill !== null && style._fill.fill !== undefined;\n        const font = new DynamicBitmapFont({\n            style,\n            overrideFill,\n            skipKerning: options.skipKerning,\n            padding: options.padding,\n            resolution: options.resolution,\n            overrideSize: false\n        });\n\n        const flatChars = resolveCharacters(options.chars);\n\n        font.ensureCharacters(flatChars.join(''));\n\n        Cache.set(`${name}-bitmap`, font);\n\n        font.once('destroy', () => Cache.remove(`${name}-bitmap`));\n\n        return font;\n    }\n\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public uninstall(name: string)\n    {\n        const cacheKey = `${name}-bitmap`;\n        const font = Cache.get<BitmapFont>(cacheKey);\n\n        if (font)\n        {\n            font.destroy();\n        }\n    }\n}\n\nexport const BitmapFontManager = new BitmapFontManagerClass();\n","import { Cache } from '../../assets/cache/Cache';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { Graphics } from '../graphics/shared/Graphics';\nimport { SdfShader } from '../text/sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { BitmapText } from './BitmapText';\n\nexport class BitmapTextPipe implements RenderPipe<BitmapText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuBitmapText: Record<number, Graphics> = {};\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuBitmapText');\n    }\n\n    public validateRenderable(bitmapText: BitmapText): boolean\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        // update the anchor...\n    }\n\n    public addRenderable(bitmapText: BitmapText, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    public destroyRenderable(bitmapText: BitmapText)\n    {\n        bitmapText.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableByUid(bitmapText.uid);\n    }\n\n    private _destroyRenderableByUid(renderableUid: number)\n    {\n        const context = this._gpuBitmapText[renderableUid].context;\n\n        if (context.customShader)\n        {\n            BigPool.return(context.customShader as PoolItem);\n\n            context.customShader = null;\n        }\n\n        BigPool.return(this._gpuBitmapText[renderableUid] as PoolItem);\n        this._gpuBitmapText[renderableUid] = null;\n    }\n\n    public updateRenderable(bitmapText: BitmapText)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    private _updateContext(bitmapText: BitmapText, proxyGraphics: Graphics)\n    {\n        const { context } = proxyGraphics;\n\n        const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.type !== 'none')\n        {\n            if (!context.customShader)\n            {\n                context.customShader = BigPool.get(SdfShader);\n            }\n        }\n\n        const chars = Array.from(bitmapText.text);\n        const style = bitmapText._style;\n\n        let currentY = bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n\n        let index = 0;\n\n        const padding = style.padding;\n        const scale = bitmapTextLayout.scale;\n\n        let tx = bitmapTextLayout.width;\n        let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n\n        if (style._stroke)\n        {\n            tx += style._stroke.width / scale;\n            ty += style._stroke.width / scale;\n        }\n\n        context\n            .translate((-bitmapText._anchor._x * tx) - padding, (-bitmapText._anchor._y * ty) - padding)\n            .scale(scale, scale);\n\n        const tint = bitmapFont.applyFillAsTint ? style._fill.color : 0xFFFFFF;\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = chars[index++];\n\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    context.texture(\n                        charData.texture,\n                        tint ? tint : 'black',\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset),\n                    );\n                }\n            }\n\n            currentY += bitmapFont.lineHeight;\n        }\n    }\n\n    private _getGpuBitmapText(bitmapText: BitmapText)\n    {\n        return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n    }\n\n    public initGpuText(bitmapText: BitmapText)\n    {\n        // TODO we could keep a bunch of contexts around and reuse one that has the same style!\n        const proxyRenderable = BigPool.get(Graphics);\n\n        this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n\n        this._updateContext(bitmapText, proxyRenderable);\n\n        bitmapText.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBitmapText[bitmapText.uid];\n    }\n\n    private _updateDistanceField(bitmapText: BitmapText)\n    {\n        const context = this._getGpuBitmapText(bitmapText).context;\n\n        const fontFamily = bitmapText._style.fontFamily as string;\n        const dynamicFont = Cache.get(`${fontFamily as string}-bitmap`);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = bitmapText.groupTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n\n        const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n\n        context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n    }\n\n    public destroy()\n    {\n        for (const uid in this._gpuBitmapText)\n        {\n            this._destroyRenderableByUid(uid as unknown as number);\n        }\n\n        this._gpuBitmapText = null;\n\n        this._renderer = null;\n    }\n}\n\nfunction syncWithProxy(container: Renderable, proxy: Renderable)\n{\n    proxy.groupTransform = container.groupTransform;\n    proxy.groupColorAlpha = container.groupColorAlpha;\n    proxy.groupColor = container.groupColor;\n    proxy.groupBlendMode = container.groupBlendMode;\n    proxy.globalDisplayStatus = container.globalDisplayStatus;\n    proxy.groupTransform = container.groupTransform;\n    proxy.localDisplayStatus = container.localDisplayStatus;\n    proxy.groupAlpha = container.groupAlpha;\n    proxy._roundPixels = container._roundPixels;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { BitmapTextPipe } from './BitmapTextPipe';\n\nextensions.add(BitmapTextPipe);\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { Container } from '../container/Container';\nimport type { HTMLText } from './HTMLText';\nimport type { HTMLTextStyle } from './HTMLTextStyle';\n\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        textureNeedsUploading: boolean;\n        generatingTexture: boolean;\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as HTMLText;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const newKey = htmlText._getKey();\n\n        if (gpuText.textureNeedsUploading)\n        {\n            gpuText.textureNeedsUploading = false;\n\n            return true;\n        }\n\n        if (gpuText.currentKey !== newKey)\n        {\n            // TODO - could look into optimising this a tad!\n            // if its a single texture, then we could just swap it?\n            // same for CanvasText..\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(htmlText: HTMLText, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(htmlText: HTMLText)\n    {\n        htmlText.off('destroyed', this._destroyRenderableBound);\n        this._destroyRenderableById(htmlText.uid);\n    }\n\n    private _destroyRenderableById(htmlTextUid: number)\n    {\n        const gpuText = this._gpuText[htmlTextUid];\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[htmlTextUid] = null;\n    }\n\n    private _updateText(htmlText: HTMLText)\n    {\n        const newKey = htmlText._getKey();\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(htmlText).catch((e) =>\n            {\n                console.error(e);\n            });\n        }\n\n        htmlText._didTextUpdate = false;\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n\n        const gpuText = this._getGpuText(htmlText);\n\n        if (gpuText.generatingTexture) return;\n\n        const newKey = htmlText._getKey();\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        gpuText.generatingTexture = true;\n\n        gpuText.currentKey = newKey;\n\n        const resolution = htmlText.resolution ?? this._renderer.resolution;\n\n        const texture = await this._renderer.htmlText.getManagedTexture(\n            htmlText.text,\n            resolution,\n            htmlText._style as HTMLTextStyle,\n            htmlText._getKey()\n        );\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        batchableSprite.texture = gpuText.texture = texture;\n\n        gpuText.generatingTexture = false;\n\n        gpuText.textureNeedsUploading = true;\n        htmlText.onViewUpdate();\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const gpuTextData: HTMLTextPipe['_gpuText'][number] = {\n            texture: Texture.EMPTY,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n            textureNeedsUploading: false,\n            generatingTexture: false,\n        };\n\n        const batchableSprite = gpuTextData.batchableSprite;\n\n        batchableSprite.renderable = htmlText;\n        batchableSprite.transform = htmlText.groupTransform;\n        batchableSprite.texture = Texture.EMPTY;\n        batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableSprite.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n        this._gpuText[htmlText.uid] = gpuTextData;\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        htmlText.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n\n","import type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\n\nexport const nssvg = 'http://www.w3.org/2000/svg';\nexport const nsxhtml = 'http://www.w3.org/1999/xhtml';\n\nexport class HTMLTextRenderData\n{\n    public svgRoot = document.createElementNS(nssvg, 'svg');\n    public foreignObject = document.createElementNS(nssvg, 'foreignObject');\n    public domElement = document.createElementNS(nsxhtml, 'div');\n    public styleElement = document.createElementNS(nsxhtml, 'style');\n    public image = new Image();\n    public canvasAndContext?: CanvasAndContext;\n\n    constructor()\n    {\n        const { foreignObject, svgRoot, styleElement, domElement } = this;\n        // Arbitrary max size\n\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n\n        svgRoot.appendChild(foreignObject);\n\n        foreignObject.appendChild(styleElement);\n        foreignObject.appendChild(domElement);\n    }\n}\n","import { Color } from '../../../color/Color';\n\nimport type { ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { TextStyle } from '../../text/TextStyle';\nimport type { HTMLTextStyle, HTMLTextStyleOptions } from '../HTMLTextStyle';\n\n/**\n * Internally converts all of the style properties into CSS equivalents.\n * @param style\n * @returns The CSS style string, for setting `style` property of root HTMLElement.\n */\nexport function textStyleToCSS(style: HTMLTextStyle): string\n{\n    const stroke = style._stroke;\n    const fill = style._fill;\n\n    const cssStyleString = [\n        `color: ${Color.shared.setValue(fill.color).toHex()}`,\n        `font-size: ${(style.fontSize as number)}px`,\n        `font-family: ${style.fontFamily}`,\n        `font-weight: ${style.fontWeight}`,\n        `font-style: ${style.fontStyle}`,\n        `font-variant: ${style.fontVariant}`,\n        `letter-spacing: ${style.letterSpacing}px`,\n        `text-align: ${style.align}`,\n        `padding: ${style.padding}px`,\n        `white-space: ${(style.whiteSpace === 'pre' && style.wordWrap) ? 'pre-wrap' : style.whiteSpace}`,\n        ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n        ...style.wordWrap ? [\n            `word-wrap: ${style.breakWords ? 'break-all' : 'break-word'}`,\n            `max-width: ${style.wordWrapWidth}px`\n        ] : [],\n        ...stroke ? [strokeToCSS(stroke)] : [],\n        ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n        ...style.cssOverrides,\n    ].join(';');\n\n    const cssStyles = [`div { ${cssStyleString} }`];\n\n    tagStyleToCSS(style.tagStyles, cssStyles);\n\n    return cssStyles.join(' ');\n}\n\nfunction dropShadowToCSS(dropShadowStyle: TextStyle['dropShadow']): string\n{\n    const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n    const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n    const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n\n    const position = `${x}px ${y}px`;\n\n    if (dropShadowStyle.blur > 0)\n    {\n        return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n    }\n\n    return `text-shadow: ${position} ${color}`;\n}\n\nfunction strokeToCSS(stroke: ConvertedStrokeStyle): string\n{\n    return [\n        `-webkit-text-stroke-width: ${stroke.width}px`,\n        `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        `text-stroke-width: ${stroke.width}px`,\n        `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        'paint-order: stroke',\n    ].join(';');\n}\n\n/** Converts the tag styles into CSS. */\nconst templates = {\n    fontSize: `font-size: {{VALUE}}px`,\n    fontFamily: `font-family: {{VALUE}}`,\n    fontWeight: `font-weight: {{VALUE}}`,\n    fontStyle: `font-style: {{VALUE}}`,\n    fontVariant: `font-variant: {{VALUE}}`,\n    letterSpacing: `letter-spacing: {{VALUE}}px`,\n    align: `text-align: {{VALUE}}`,\n    padding: `padding: {{VALUE}}px`,\n    whiteSpace: `white-space: {{VALUE}}`,\n    lineHeight: `line-height: {{VALUE}}px`,\n    wordWrapWidth: `max-width: {{VALUE}}px`,\n};\n\n/** Converts the tag styles into CSS if modifications are required */\nconst transform = {\n    fill: (value: string) => `color: ${Color.shared.setValue(value).toHex()}`,\n    breakWords: (value: string) => `word-wrap: ${value ? 'break-all' : 'break-word'}`,\n    stroke: strokeToCSS,\n    dropShadow: dropShadowToCSS\n};\n\nfunction tagStyleToCSS(tagStyles: Record<string, HTMLTextStyleOptions>, out: string[])\n{\n    for (const i in tagStyles)\n    {\n        const tagStyle = tagStyles[i];\n        const cssTagStyle = [];\n\n        for (const j in tagStyle)\n        {\n            if (transform[j as keyof typeof transform])\n            {\n                cssTagStyle.push(transform[j as keyof typeof transform](tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n            else if (templates[j as keyof typeof templates])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(templates[j as keyof typeof templates].replace('{{VALUE}}', tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n        }\n\n        out.push(`${i} { ${cssTagStyle.join(';')} }`);\n    }\n}\n","/* eslint-disable accessor-pairs */\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey';\nimport { textStyleToCSS } from './utils/textStyleToCSS';\n\nimport type { FillInput, StrokeInput } from '../graphics/shared/FillTypes';\nimport type { TextStyleOptions } from '../text/TextStyle';\n\n/**\n * Options for HTML text style, extends {@link TextStyle}.\n * @memberof text\n * @extends text.TextStyleOptions\n * @property {string[]} [cssOverrides] - CSS style(s) to add.\n * @property {Record<string, text.HTMLTextStyleOptions>} [tagStyles] - Tag styles.\n */\nexport interface HTMLTextStyleOptions extends Omit<TextStyleOptions, 'leading' | 'textBaseline' | 'trim' >\n{\n    cssOverrides?: string[];\n    tagStyles?: Record<string, HTMLTextStyleOptions>;\n}\n\n/**\n * A TextStyle object rendered by the HTMLTextSystem.\n * @memberof text\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    private _cssOverrides: string[] = [];\n    private _cssStyle: string;\n    /**\n     * List of styles per tag.\n     * @example\n     * new HTMLText({\n     *   text:'<red>Red</red>,<blue>Blue</blue>,<green>Green</green>',\n     *   style:{\n     *       fontFamily: 'DM Sans',\n     *       fill: 'white',\n     *       fontSize:100,\n     *       tagStyles:{\n     *           red:{\n     *               fill:'red',\n     *           },\n     *           blue:{\n     *               fill:'blue',\n     *           },\n     *           green:{\n     *               fill:'green',\n     *           }\n     *       }\n     *   }\n     * );\n     */\n    public tagStyles: Record<string, HTMLTextStyleOptions>;\n\n    constructor(options: HTMLTextStyleOptions = {})\n    {\n        super(options);\n\n        this.cssOverrides ??= options.cssOverrides;\n        this.tagStyles = options.tagStyles ?? {};\n    }\n\n    /** List of style overrides that will be applied to the HTML text. */\n    set cssOverrides(value: string | string[])\n    {\n        this._cssOverrides = value instanceof Array ? value : [value];\n        this.update();\n    }\n\n    get cssOverrides(): string[]\n    {\n        return this._cssOverrides;\n    }\n\n    protected override _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join('-');\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._cssStyle = null;\n        super.update();\n    }\n\n    /**\n     * Creates a new HTMLTextStyle object with the same values as this one.\n     * @returns New cloned HTMLTextStyle object\n     */\n    public clone(): HTMLTextStyle\n    {\n        return new HTMLTextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n            cssOverrides: this.cssOverrides,\n        });\n    }\n\n    get cssStyle(): string\n    {\n        if (!this._cssStyle)\n        {\n            this._cssStyle = textStyleToCSS(this);\n        }\n\n        return this._cssStyle;\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this.cssOverrides.push(...toAdd);\n            this.update();\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n            this.update();\n        }\n    }\n\n    override set fill(value: FillInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color fill is not supported by HTMLText');\n            // #endif\n        }\n\n        super.fill = value;\n    }\n\n    override set stroke(value: StrokeInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (value && typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color stroke is not supported by HTMLText');\n            // #endif\n        }\n\n        super.stroke = value;\n    }\n}\n","import { loadFontAsBase64 } from './loadFontAsBase64';\n\nexport interface FontCSSStyleOptions\n{\n    fontFamily: string | string[]\n    fontWeight: string\n    fontStyle: string\n}\n\n/**\n * This will take a font url and a style and return a css string that can be injected into a style tag\n * This will contain inlined base64 font and the font family information\n * @param style - the style to generate the css for\n * @param url - The url to load the font from\n * @returns - The css string\n */\nexport async function loadFontCSS(style: FontCSSStyleOptions, url: string): Promise<string>\n{\n    const dataSrc = await loadFontAsBase64(url);\n\n    return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n","import { DOMAdapter } from '../../../environment/adapter';\n\n/**\n * Resolves a font url to a base64 string\n * @param url - The url to load the font from\n * @returns - The font as a base64 string\n */\nexport async function loadFontAsBase64(url: string): Promise<string>\n{\n    const response = await DOMAdapter.get().fetch(url);\n\n    const blob = await response.blob();\n\n    const reader = new FileReader();\n\n    const dataSrc: string = await new Promise((resolve, reject) =>\n    {\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n\n    return dataSrc;\n}\n","import { Cache } from '../../../assets/cache/Cache';\nimport { loadFontCSS } from './loadFontCSS';\n\nimport type { FontCSSStyleOptions } from './loadFontCSS';\n\nexport const FontStylePromiseCache = new Map<string, Promise<string>>();\n\n/**\n * takes the font families and returns a css string that can be injected into a style tag\n * It will contain the font families and the font urls encoded as base64\n * @param fontFamilies - The font families to load\n * @param style - The FontCSSStyleOptions to load the font with (used for the first font family)\n * @param defaultOptions - The default options to load the font with (used for the rest of the font families)\n * @param defaultOptions.fontWeight - The default font weight\n * @param defaultOptions.fontStyle - The default font style\n * @returns - The css string\n */\nexport async function getFontCss(\n    fontFamilies: string[],\n    style: FontCSSStyleOptions,\n    defaultOptions: {fontWeight: string, fontStyle: string}\n)\n{\n    const fontPromises = fontFamilies\n        .filter((fontFamily) => Cache.has(`${fontFamily}-and-url`))\n        .map((fontFamily, i) =>\n        {\n            if (!FontStylePromiseCache.has(fontFamily))\n            {\n                const { url } = Cache.get(`${fontFamily}-and-url`);\n\n                if (i === 0)\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: style.fontWeight,\n                        fontStyle: style.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n\n                else\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: defaultOptions.fontWeight,\n                        fontStyle: defaultOptions.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n            }\n\n            return FontStylePromiseCache.get(fontFamily);\n        });\n\n    return (await Promise.all(fontPromises)).join('\\n');\n}\n","import { HTMLTextRenderData } from '../HTMLTextRenderData';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\nlet tempHTMLTextRenderData: HTMLTextRenderData;\n\n/**\n * Measures the HTML text without actually generating an image.\n * This is used to calculate the size of the text.\n * @param text - The text to measure\n * @param style - The style to use\n * @param fontStyleCSS - The font css to use\n * @param htmlTextRenderData - The HTMLTextRenderData to write the SVG to\n * @returns - The size of the text\n */\nexport function measureHtmlText(\n    text: string,\n    style: HTMLTextStyle,\n    fontStyleCSS?: string,\n    htmlTextRenderData?: HTMLTextRenderData\n): Size\n{\n    htmlTextRenderData ||= tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n\n    const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n\n    domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n\n    domElement.setAttribute('style', 'transform-origin: top left; display: inline-block');\n\n    if (fontStyleCSS)\n    {\n        styleElement.textContent = fontStyleCSS;\n    }\n\n    // Measure the contents using the shadow DOM\n    document.body.appendChild(svgRoot);\n\n    const contentBounds = domElement.getBoundingClientRect();\n\n    svgRoot.remove();\n\n    // padding is included in the CSS calculation, so we need to remove it here\n    const doublePadding = style.padding * 2;\n\n    return {\n        width: contentBounds.width - doublePadding,\n        height: contentBounds.height - doublePadding,\n    };\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { type CanvasAndContext, CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { isSafari } from '../../utils/browser/isSafari';\nimport { warn } from '../../utils/logging/warn';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource';\nimport { HTMLTextRenderData } from './HTMLTextRenderData';\nimport { HTMLTextStyle } from './HTMLTextStyle';\nimport { extractFontFamilies } from './utils/extractFontFamilies';\nimport { getFontCss } from './utils/getFontCss';\nimport { getSVGUrl } from './utils/getSVGUrl';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage';\nimport { loadSVGImage } from './utils/loadSVGImage';\nimport { measureHtmlText } from './utils/measureHtmlText';\n\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { HTMLTextOptions } from './HTMLText';\nimport type { FontCSSStyleOptions } from './utils/loadFontCSS';\n\ninterface HTMLTextTexture\n{\n    texture: Texture,\n    usageCount: number,\n    promise: Promise<Texture>,\n}\n\n/**\n * System plugin to the renderer to manage HTMLText\n * @memberof rendering\n */\nexport class HTMLTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    public static defaultFontOptions: FontCSSStyleOptions = {\n        fontFamily: 'Arial',\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n    };\n\n    private _activeTextures: Record<string, HTMLTextTexture> = {};\n\n    /**\n     * WebGPU has a cors issue when uploading an image that is an SVGImage\n     * To get around this we need to create a canvas draw the image to it and upload that instead.\n     * Bit of a shame.. but no other work around just yet!\n     */\n    private readonly _createCanvas: boolean;\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._createCanvas = renderer.type === RendererType.WEBGPU;\n    }\n\n    public getTexture(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this._buildTexturePromise(\n            options.text as string,\n            options.resolution,\n            options.style as HTMLTextStyle\n        );\n    }\n\n    public getManagedTexture(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n        textKey: string\n    ): Promise<Texture>\n    {\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].promise;\n        }\n\n        const promise = this._buildTexturePromise(text, resolution, style)\n            .then((texture) =>\n            {\n                this._activeTextures[textKey].texture = texture;\n\n                return texture;\n            });\n\n        this._activeTextures[textKey] = {\n            texture: null,\n            promise,\n            usageCount: 1,\n        };\n\n        return promise;\n    }\n\n    private async _buildTexturePromise(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n    )\n    {\n        const htmlTextData = BigPool.get(HTMLTextRenderData);\n        const fontFamilies = extractFontFamilies(text, style);\n        const fontCSS = await getFontCss(\n            fontFamilies,\n            style,\n            HTMLTextStyle.defaultTextStyle as {fontWeight: string, fontStyle: string}\n        );\n        const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const image = htmlTextData.image;\n\n        // this off set will ensure we don't get any UV bleeding!\n        const uvSafeOffset = 2;\n\n        image.width = (width | 0) + uvSafeOffset;\n        image.height = (height | 0) + uvSafeOffset;\n\n        const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n\n        await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n\n        const resource: HTMLImageElement | HTMLCanvasElement = image;\n        let canvasAndContext: CanvasAndContext;\n\n        if (this._createCanvas)\n        {\n            // silly webGPU workaround..\n            canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n        }\n\n        const texture = getPo2TextureFromSource(canvasAndContext ? canvasAndContext.canvas : resource,\n            image.width - uvSafeOffset,\n            image.height - uvSafeOffset,\n            resolution\n        );\n\n        if (this._createCanvas)\n        {\n            this._renderer.texture.initSource(texture.source);\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n        }\n\n        BigPool.return(htmlTextData as PoolItem);\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        // TODO SHOULD NOT BE NEEDED\n        if (!activeTexture) return;\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            if (activeTexture.texture)\n            {\n                this._cleanUp(activeTexture);\n            }\n            else\n            {\n                // we did not resolve...\n                activeTexture.promise.then((texture) =>\n                {\n                    activeTexture.texture = texture;\n\n                    this._cleanUp(activeTexture);\n                }).catch(() =>\n                {\n                    // #if _DEBUG\n                    warn('HTMLTextSystem: Failed to clean texture');\n                    // #endif\n                });\n            }\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    private _cleanUp(activeTexture: HTMLTextTexture)\n    {\n        TexturePool.returnTexture(activeTexture.texture);\n        activeTexture.texture.source.resource = null;\n        activeTexture.texture.source.uploadMethodId = 'unknown';\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n","import type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n","import type { HTMLTextRenderData } from '../HTMLTextRenderData';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * takes all the data and returns a svg url string can be loaded by an image element\n * @param text - The text to measure\n * @param style - The style to use\n * @param resolution - The resolution to use\n * @param fontCSS - The font css to use\n * @param htmlTextData - The HTMLTextRenderData to write the SVG to\n * @returns - The SVG as a url string\n */\nexport function getSVGUrl(\n    text: string,\n    style: HTMLTextStyle,\n    resolution: number,\n    fontCSS: string,\n    htmlTextData: HTMLTextRenderData\n)\n{\n    const { domElement, styleElement, svgRoot } = htmlTextData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n    domElement.setAttribute('style', `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n    styleElement.textContent = fontCSS;\n\n    const { width, height } = htmlTextData.image;\n\n    svgRoot.setAttribute('width', width.toString());\n    svgRoot.setAttribute('height', height.toString());\n\n    return new XMLSerializer().serializeToString(svgRoot);\n}\n","/**\n * This function loads an SVG image into an HTMLImageElement.\n * The image can then be uploaded as texture to the GPU.\n * iOS has a bug where embedded fonts are not available immediately after the image loads,\n * so we wait an arbitrary amount of time before resolving the promise.\n * @param image - The image to load the SVG into\n * @param url - The url to load the SVG from\n * @param delay - Whether to delay the load\n * @returns - A promise that resolves when the image has loaded\n */\nexport function loadSVGImage(image: HTMLImageElement, url: string, delay: boolean)\n{\n    return new Promise<void>(async (resolve) =>\n    {\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (delay)\n        {\n            await new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        image.onload = () =>\n        {\n            resolve();\n        };\n\n        image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n        image.crossOrigin = 'anonymous';\n    });\n}\n","import { DOMAdapter } from '../../environment/adapter';\n\nexport function isSafari(): boolean\n{\n    const { userAgent } = DOMAdapter.get().getNavigator();\n\n    return (/^((?!chrome|android).)*safari/i).test(userAgent);\n}\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\nimport type { CanvasAndContext } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\n/**\n * This function converts an image to a canvas, and returns the canvas.\n * It is used to convert images to canvases to work around a CORS issue where WebGPU cannot\n * upload an SVGImage to a texture.\n *\n * It uses the CanvasPool to get an optimal canvas and context, and then draws the image onto it.\n * Remember to return this canvas is immediately to the CanvasPool for reuse when you are done with it.\n * (eg upload it to the GPU!)\n * @param image - The image to convert to a canvas.\n * @param resolution - The resolution of the canvas.\n */\nexport function getTemporaryCanvasFromImage(image: HTMLImageElement, resolution: number): CanvasAndContext\n{\n    // Get an optimal canvas and context from the CanvasPool, based on the\n    // dimensions of the image and the desired resolution.\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n        image.width,\n        image.height,\n        resolution\n    );\n\n    // Clear the context of the canvas, and draw the image onto it.\n    const { context } = canvasAndContext;\n\n    context.clearRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n\n    // Return the canvas.\n    return canvasAndContext;\n}\n\n","import { extensions } from '../../extensions/Extensions';\nimport { HTMLTextPipe } from './HTMLTextPipe';\nimport { HTMLTextSystem } from './HTMLTextSystem';\n\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n","import EventEmitter from 'eventemitter3';\nimport { Color, type ColorSource } from '../../color/Color';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { FillGradient } from '../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../graphics/shared/fill/FillPattern';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext';\nimport {\n    toFillStyle,\n    toStrokeStyle\n} from '../graphics/shared/utils/convertFillInputToFillStyle';\nimport { generateTextStyleKey } from './utils/generateTextStyleKey';\n\nimport type { TextureDestroyOptions, TypeOrBool } from '../container/destroyTypes';\nimport type {\n    ConvertedFillStyle,\n    ConvertedStrokeStyle,\n    FillInput,\n    FillStyle,\n    StrokeInput,\n    StrokeStyle\n} from '../graphics/shared/FillTypes';\n\nexport type TextStyleAlign = 'left' | 'center' | 'right' | 'justify';\nexport type TextStyleFill = string | string[] | number | number[] | CanvasGradient | CanvasPattern;\nexport type TextStyleFontStyle = 'normal' | 'italic' | 'oblique';\nexport type TextStyleFontVariant = 'normal' | 'small-caps';\n// eslint-disable-next-line max-len\nexport type TextStyleFontWeight = 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\nexport type TextStyleLineJoin = 'miter' | 'round' | 'bevel';\nexport type TextStyleTextBaseline = 'alphabetic' | 'top' | 'hanging' | 'middle' | 'ideographic' | 'bottom';\nexport type TextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line';\n\n/**\n * A collection of text related classes.\n * @namespace text\n */\n\n/**\n * A drop shadow effect.\n * @memberof text\n */\nexport type TextDropShadow = {\n    /** Set alpha for the drop shadow  */\n    alpha: number;\n    /** Set a angle of the drop shadow */\n    angle: number;\n    /** Set a shadow blur radius */\n    blur: number;\n    /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n    color: ColorSource;\n    /** Set a distance of the drop shadow */\n    distance: number;\n};\n\n/**\n * Constructor options used for `TextStyle` instances.\n * ```js\n * const textStyle = new TextStyle({\n *    fontSize: 12,\n *    fill: 'black',\n * });\n * ```\n * @see {@link text.TextStyle}\n * @memberof text\n */\nexport interface TextStyleOptions\n{\n    /**\n     * Alignment for multiline text, does not affect single line text\n     * @type {'left'|'center'|'right'|'justify'}\n     */\n    align?: TextStyleAlign;\n    /** Indicates if lines can be wrapped within words, it needs `wordWrap` to be set to `true` */\n    breakWords?: boolean;\n    /** Set a drop shadow for the text */\n    dropShadow?: boolean | Partial<TextDropShadow>;\n    /**\n     * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n     * Can be an array to create a gradient, e.g., `['#000000','#FFFFFF']`\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    fill?: FillInput;\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    fontFamily?: string | string[];\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    fontSize?: number | string;\n    /**\n     * The font style.\n     * @type {'normal'|'italic'|'oblique'}\n     */\n    fontStyle?: TextStyleFontStyle;\n    /**\n     * The font variant.\n     * @type {'normal'|'small-caps'}\n     */\n    fontVariant?: TextStyleFontVariant;\n    /**\n     * The font weight.\n     * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    fontWeight?: TextStyleFontWeight;\n    /** The height of the line, a number that represents the vertical space that a letter uses. */\n    leading?: number;\n    /** The amount of spacing between letters, default is 0 */\n    letterSpacing?: number;\n    /** The line height, a number that represents the vertical space that a letter uses */\n    lineHeight?: number;\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from\n     * happening by adding padding to all sides of the text.\n     */\n    padding?: number;\n    /** A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00' */\n    stroke?: StrokeInput;\n    /**\n     * The baseline of the text that is rendered.\n     * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    textBaseline?: TextStyleTextBaseline;\n    trim?: boolean,\n    /**\n     * Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     * (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve,\n     * collapse). It needs wordWrap to be set to true.\n     * @type {'normal'|'pre'|'pre-line'}\n     */\n    whiteSpace?: TextStyleWhiteSpace;\n    /** Indicates if word wrap should be used */\n    wordWrap?: boolean;\n    /** The width at which text will wrap, it needs wordWrap to be set to true */\n    wordWrapWidth?: number;\n}\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n * @memberof text\n * @example\n * import { TextStyle } from 'pixi.js';\n * const style = new TextStyle({\n *   fontFamily: ['Helvetica', 'Arial', 'sans-serif'],\n *   fontSize: 36,\n * });\n */\nexport class TextStyle extends EventEmitter<{\n    update: TextDropShadow\n}>\n{\n    /** The default drop shadow settings */\n    public static defaultDropShadow: TextDropShadow = {\n        /** Set alpha for the drop shadow */\n        alpha: 1,\n        /** Set a angle of the drop shadow */\n        angle: Math.PI / 6,\n        /** Set a shadow blur radius */\n        blur: 0,\n        /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n        color: 'black',\n        /** Set a distance of the drop shadow */\n        distance: 5,\n    };\n\n    /** The default text style settings */\n    public static defaultTextStyle: TextStyleOptions = {\n        /**\n         * See {@link TextStyle.align}\n         * @type {'left'|'center'|'right'|'justify'}\n         */\n        align: 'left',\n        /** See {@link TextStyle.breakWords} */\n        breakWords: false,\n        /** See {@link TextStyle.dropShadow} */\n        dropShadow:  null,\n        /**\n         * See {@link TextStyle.fill}\n         * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n         */\n        fill: 'black',\n        /**\n         * See {@link TextStyle.fontFamily}\n         * @type {string|string[]}\n         */\n        fontFamily: 'Arial',\n        /**\n         * See {@link TextStyle.fontSize}\n         * @type {number|string}\n         */\n        fontSize: 26,\n        /**\n         * See {@link TextStyle.fontStyle}\n         * @type {'normal'|'italic'|'oblique'}\n         */\n        fontStyle: 'normal',\n        /**\n         * See {@link TextStyle.fontVariant}\n         * @type {'normal'|'small-caps'}\n         */\n        fontVariant: 'normal',\n        /**\n         * See {@link TextStyle.fontWeight}\n         * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n         */\n        fontWeight: 'normal',\n        /** See {@link TextStyle.leading} */\n        leading: 0,\n        /** See {@link TextStyle.letterSpacing} */\n        letterSpacing: 0,\n        /** See {@link TextStyle.lineHeight} */\n        lineHeight: 0,\n        /** See {@link TextStyle.padding} */\n        padding: 0,\n        /**\n         * See {@link TextStyle.stroke}\n         * @type {string|number}\n         */\n        stroke: null,\n        /**\n         * See {@link TextStyle.textBaseline}\n         * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n         */\n        textBaseline: 'alphabetic',\n        /** See {@link TextStyle.trim} */\n        trim: false,\n        /**\n         * See {@link TextStyle.whiteSpace}\n         * @type {'normal'|'pre'|'pre-line'}\n         */\n        whiteSpace: 'pre',\n        /** See {@link TextStyle.wordWrap} */\n        wordWrap: false,\n        /** See {@link TextStyle.wordWrapWidth} */\n        wordWrapWidth: 100,\n    };\n\n    // colors!!\n    public _fill: ConvertedFillStyle;\n    private _originalFill: FillInput;\n\n    public _stroke: ConvertedStrokeStyle;\n    private _originalStroke: StrokeInput;\n\n    private _dropShadow: TextDropShadow;\n\n    private _fontFamily: string | string[];\n    private _fontSize: number;\n    private _fontStyle: TextStyleFontStyle;\n    private _fontVariant: TextStyleFontVariant;\n    private _fontWeight: TextStyleFontWeight;\n\n    private _breakWords: boolean;\n    private _align: TextStyleAlign;\n    private _leading: number;\n    private _letterSpacing: number;\n    private _lineHeight: number;\n\n    private _textBaseline: TextStyleTextBaseline;\n    private _whiteSpace: TextStyleWhiteSpace;\n    private _wordWrap: boolean;\n    private _wordWrapWidth: number;\n\n    private _padding: number;\n\n    protected _styleKey: string;\n    private _trim: boolean;\n\n    constructor(style: Partial<TextStyleOptions> = {})\n    {\n        super();\n\n        convertV7Tov8Style(style);\n\n        const fullStyle = { ...TextStyle.defaultTextStyle, ...style };\n\n        for (const key in fullStyle)\n        {\n            const thisKey = key as keyof typeof this;\n\n            this[thisKey] = fullStyle[key as keyof TextStyleOptions] as any;\n        }\n\n        this.update();\n    }\n\n    /**\n     * Alignment for multiline text, does not affect single line text.\n     * @member {'left'|'center'|'right'|'justify'}\n     */\n    get align(): TextStyleAlign { return this._align; }\n    set align(value: TextStyleAlign) { this._align = value; this.update(); }\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean { return this._breakWords; }\n    set breakWords(value: boolean) { this._breakWords = value; this.update(); }\n    /** Set a drop shadow for the text. */\n    get dropShadow(): TextDropShadow { return this._dropShadow; }\n    set dropShadow(value: boolean | TextDropShadow)\n    {\n        if (value !== null && typeof value === 'object')\n        {\n            this._dropShadow = this._createProxy({ ...TextStyle.defaultDropShadow, ...value });\n        }\n        else\n        {\n            this._dropShadow = value ? this._createProxy({ ...TextStyle.defaultDropShadow }) : null;\n        }\n\n        this.update();\n    }\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    get fontFamily(): string | string[] { return this._fontFamily; }\n    set fontFamily(value: string | string[]) { this._fontFamily = value; this.update(); }\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    get fontSize(): number { return this._fontSize; }\n    set fontSize(value: string | number)\n    {\n        if (typeof value === 'string')\n        {\n            // eg '34px' to number\n            this._fontSize = parseInt(value as string, 10);\n        }\n        else\n        {\n            this._fontSize = value as number;\n        }\n        this.update();\n    }\n    /**\n     * The font style.\n     * @member {'normal'|'italic'|'oblique'}\n     */\n    get fontStyle(): TextStyleFontStyle { return this._fontStyle; }\n    set fontStyle(value: TextStyleFontStyle)\n    {\n        this._fontStyle = value.toLowerCase() as TextStyleFontStyle;\n        this.update();\n    }\n    /**\n     * The font variant.\n     * @member {'normal'|'small-caps'}\n     */\n    get fontVariant(): TextStyleFontVariant { return this._fontVariant; }\n    set fontVariant(value: TextStyleFontVariant) { this._fontVariant = value; this.update(); }\n    /**\n     * The font weight.\n     * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    get fontWeight(): TextStyleFontWeight { return this._fontWeight; }\n    set fontWeight(value: TextStyleFontWeight) { this._fontWeight = value; this.update(); }\n    /** The space between lines. */\n    get leading(): number { return this._leading; }\n    set leading(value: number) { this._leading = value; this.update(); }\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number { return this._letterSpacing; }\n    set letterSpacing(value: number) { this._letterSpacing = value; this.update(); }\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number { return this._lineHeight; }\n    set lineHeight(value: number) { this._lineHeight = value; this.update(); }\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get padding(): number { return this._padding; }\n    set padding(value: number) { this._padding = value; this.update(); }\n\n    /** Trim transparent borders. This is an expensive operation so only use this if you have to! */\n    get trim(): boolean { return this._trim; }\n    set trim(value: boolean) { this._trim = value; this.update(); }\n    /**\n     * The baseline of the text that is rendered.\n     * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    get textBaseline(): TextStyleTextBaseline { return this._textBaseline; }\n    set textBaseline(value: TextStyleTextBaseline) { this._textBaseline = value; this.update(); }\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     * @member {'normal'|'pre'|'pre-line'}\n     */\n    get whiteSpace(): TextStyleWhiteSpace { return this._whiteSpace; }\n    set whiteSpace(value: TextStyleWhiteSpace) { this._whiteSpace = value; this.update(); }\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean { return this._wordWrap; }\n    set wordWrap(value: boolean) { this._wordWrap = value; this.update(); }\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number { return this._wordWrapWidth; }\n    set wordWrapWidth(value: number) { this._wordWrapWidth = value; this.update(); }\n\n    /** A fillstyle that will be used on the text e.g., 'red', '#00FF00'. */\n    get fill(): FillInput\n    {\n        return this._originalFill;\n    }\n\n    set fill(value: FillInput)\n    {\n        if (value === this._originalFill) return;\n\n        this._originalFill = value;\n\n        if (this._isFillStyle(value))\n        {\n            this._originalFill = this._createProxy({ ...GraphicsContext.defaultFillStyle, ...value }, () =>\n            {\n                this._fill = toFillStyle(\n                    { ...this._originalFill as FillStyle },\n                    GraphicsContext.defaultFillStyle\n                );\n            });\n        }\n\n        this._fill = toFillStyle(\n            value === 0x0 ? 'black' : value,\n            GraphicsContext.defaultFillStyle\n        );\n        this.update();\n    }\n\n    /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n    get stroke(): StrokeInput\n    {\n        return this._originalStroke;\n    }\n\n    set stroke(value: StrokeInput)\n    {\n        if (value === this._originalStroke) return;\n\n        this._originalStroke = value;\n\n        if (this._isFillStyle(value))\n        {\n            this._originalStroke = this._createProxy({ ...GraphicsContext.defaultStrokeStyle, ...value }, () =>\n            {\n                this._stroke = toStrokeStyle(\n                    { ...this._originalStroke as StrokeStyle },\n                    GraphicsContext.defaultStrokeStyle\n                );\n            });\n        }\n\n        this._stroke = toStrokeStyle(value, GraphicsContext.defaultStrokeStyle);\n        this.update();\n    }\n\n    protected _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this);\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._styleKey = null;\n        this.emit('update', this);\n    }\n\n    /** Resets all properties to the default values */\n    public reset()\n    {\n        const defaultStyle = TextStyle.defaultTextStyle;\n\n        for (const key in defaultStyle)\n        {\n            this[key as keyof typeof this] = defaultStyle[key as keyof TextStyleOptions] as any;\n        }\n    }\n\n    get styleKey()\n    {\n        return this._styleKey || this._generateKey();\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * @returns New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        return new TextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this._dropShadow ? { ...this._dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            leading: this.leading,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            textBaseline: this.textBaseline,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n        });\n    }\n\n    /**\n     * Destroys this text style.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the texture of the this style\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the this style\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false)\n    {\n        this.removeAllListeners();\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            if (this._fill?.texture)\n            {\n                this._fill.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalFill as FillStyle)?.texture)\n            {\n                (this._originalFill as FillStyle).texture.destroy(destroyTextureSource);\n            }\n\n            if (this._stroke?.texture)\n            {\n                this._stroke.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalStroke as FillStyle)?.texture)\n            {\n                (this._originalStroke as FillStyle).texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this._fill = null;\n        this._stroke = null;\n        this.dropShadow = null;\n        this._originalStroke = null;\n        this._originalFill = null;\n    }\n\n    private _createProxy<T extends object>(value: T, cb?: (property: string, newValue: any) => void): T\n    {\n        return new Proxy<T>(value, {\n            set: (target, property, newValue) =>\n            {\n                target[property as keyof T] = newValue;\n                cb?.(property as string, newValue);\n                this.update();\n\n                return true;\n            }\n        });\n    }\n\n    private _isFillStyle(value: FillInput): value is FillStyle\n    {\n        return ((value ?? null) !== null\n            && !(Color.isColorLike(value) || value instanceof FillGradient || value instanceof FillPattern));\n    }\n}\n\nfunction convertV7Tov8Style(style: TextStyleOptions)\n{\n    const oldStyle = style as TextStyleOptions & {\n        dropShadowAlpha?: number;\n        dropShadowAngle?: number;\n        dropShadowBlur?: number;\n        dropShadowColor?: number;\n        dropShadowDistance?: number;\n        fillGradientStops?: number[];\n        strokeThickness?: number;\n    };\n\n    if (typeof oldStyle.dropShadow === 'boolean' && oldStyle.dropShadow)\n    {\n        const defaults = TextStyle.defaultDropShadow;\n\n        style.dropShadow = {\n            alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n            angle: oldStyle.dropShadowAngle ?? defaults.angle,\n            blur: oldStyle.dropShadowBlur ?? defaults.blur,\n            color: oldStyle.dropShadowColor ?? defaults.color,\n            distance:   oldStyle.dropShadowDistance ?? defaults.distance,\n        };\n    }\n\n    if (oldStyle.strokeThickness !== undefined)\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'strokeThickness is now a part of stroke');\n        // #endif\n\n        const color = oldStyle.stroke;\n        let obj: FillStyle = {};\n\n        // handles stroke: 0x0, stroke: { r: 0, g: 0, b: 0, a: 0 } stroke: new Color(0x0)\n        if (Color.isColorLike(color as ColorSource))\n        {\n            obj.color = color as ColorSource;\n        }\n        // handles stroke: new FillGradient()\n        else if (color instanceof FillGradient || color instanceof FillPattern)\n        {\n            obj.fill = color as FillGradient | FillPattern;\n        }\n        // handles stroke: { color: 0x0 } or stroke: { fill: new FillGradient() }\n        else if (Object.hasOwnProperty.call(color, 'color') || Object.hasOwnProperty.call(color, 'fill'))\n        {\n            obj = color as FillStyle;\n        }\n        else\n        {\n            throw new Error('Invalid stroke value.');\n        }\n\n        style.stroke = {\n            ...obj,\n            width: oldStyle.strokeThickness\n        };\n    }\n\n    if (Array.isArray(oldStyle.fillGradientStops))\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'gradient fill is now a fill pattern: `new FillGradient(...)`');\n        // #endif\n\n        let fontSize: number;\n\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (style.fontSize == null)\n        {\n            style.fontSize = TextStyle.defaultTextStyle.fontSize;\n        }\n        else if (typeof style.fontSize === 'string')\n        {\n            // eg '34px' to number\n            fontSize = parseInt(style.fontSize as string, 10);\n        }\n        else\n        {\n            fontSize = style.fontSize as number;\n        }\n\n        const gradientFill = new FillGradient(0, 0, 0, fontSize * 1.7);\n\n        const fills: number[] = oldStyle.fillGradientStops\n            .map((color: ColorSource) => Color.shared.setValue(color).toNumber());\n\n        fills.forEach((number, index) =>\n        {\n            const ratio = index / (fills.length - 1);\n\n            gradientFill.addColorStop(ratio, number);\n        });\n\n        style.fill = {\n            fill: gradientFill\n        };\n    }\n}\n\n","import { DOMAdapter } from '../../../environment/adapter';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { TextStyle, TextStyleWhiteSpace } from '../TextStyle';\n\n// The type for Intl.Segmenter is only available since TypeScript 4.7.2, so let's make a polyfill for it.\ninterface ISegmentData\n{\n    segment: string;\n}\ninterface ISegments\n{\n    [Symbol.iterator](): IterableIterator<ISegmentData>;\n}\ninterface ISegmenter\n{\n    segment(input: string): ISegments;\n}\ninterface IIntl\n{\n    Segmenter?: {\n        prototype: ISegmenter;\n        new(): ISegmenter;\n    };\n}\n\n/**\n * A number, or a string containing a number.\n * @memberof text\n * @typedef {object} FontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\nexport interface FontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = Record<string, number>;\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { TextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = TextMetrics.measureText('Your text', style);\n * @memberof text\n */\nexport class CanvasTextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /** The font properties object from TextMetrics.measureFont. */\n    public fontProperties: FontMetrics;\n\n    /**\n     * String used for calculate font metrics.\n     * These characters are all tall to help calculate the height required for text.\n     */\n    public static METRICS_STRING = '|ÉqÅ';\n\n    /** Baseline symbol for calculate font metrics. */\n    public static BASELINE_SYMBOL = 'M';\n\n    /** Baseline multiplier for calculate font metrics. */\n    public static BASELINE_MULTIPLIER = 1.4;\n\n    /** Height multiplier for setting height of canvas to calculate font metrics. */\n    public static HEIGHT_MULTIPLIER = 2.0;\n\n    /**\n     * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n     * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n     * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n     * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n     * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n     * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n     * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n     * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n     * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n     */\n    public static graphemeSegmenter: (s: string) => string[] = (() =>\n    {\n        if (typeof (Intl as IIntl)?.Segmenter === 'function')\n        {\n            const segmenter = new (Intl as IIntl).Segmenter();\n\n            return (s: string) => [...segmenter.segment(s)].map((x) => x.segment);\n        }\n\n        return (s: string) => [...s];\n    })();\n\n    public static _experimentalLetterSpacingSupported?: boolean;\n\n    /**\n     * Checking that we can use modern canvas 2D API.\n     *\n     * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n     * @see TextMetrics.experimentalLetterSpacing\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/ICanvasRenderingContext2D/letterSpacing\n     * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n     */\n    public static get experimentalLetterSpacingSupported(): boolean\n    {\n        let result = CanvasTextMetrics._experimentalLetterSpacingSupported;\n\n        if (result !== undefined)\n        {\n            const proto = DOMAdapter.get().getCanvasRenderingContext2D().prototype;\n\n            result\n                = CanvasTextMetrics._experimentalLetterSpacingSupported\n                = 'letterSpacing' in proto || 'textLetterSpacing' in proto;\n        }\n\n        return result;\n    }\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     * @see TextMetrics.experimentalLetterSpacingSupported\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** Cache of {@see TextMetrics.FontMetrics} objects. */\n    private static _fonts: Record<string, FontMetrics> = {};\n\n    /** Cache of new line chars. */\n    private static readonly _newlines: number[] = [\n        0x000A, // line feed\n        0x000D, // carriage return\n    ];\n\n    /** Cache of breaking spaces. */\n    private static readonly _breakingSpaces: number[] = [\n        0x0009, // character tabulation\n        0x0020, // space\n        0x2000, // en quad\n        0x2001, // em quad\n        0x2002, // en space\n        0x2003, // em space\n        0x2004, // three-per-em space\n        0x2005, // four-per-em space\n        0x2006, // six-per-em space\n        0x2008, // punctuation space\n        0x2009, // thin space\n        0x200A, // hair space\n        0x205F, // medium mathematical space\n        0x3000, // ideographic space\n    ];\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __canvas: ICanvas;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __context: ICanvasRenderingContext2D;\n\n    private static readonly _measurementCache: Record<string, CanvasTextMetrics> = {};\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {FontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: FontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @param wordWrap\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text = ' ',\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas,\n        wordWrap: boolean = style.wordWrap,\n    ): CanvasTextMetrics\n    {\n        const textKey = `${text}:${style.styleKey}`;\n\n        // TODO - if we find this starts to go nuts with memory, we can remove the cache\n        // or instead just stick a usage tick that we increment each time we return it.\n        // if some are not used, we can just tidy them up!\n        if (CanvasTextMetrics._measurementCache[textKey]) return CanvasTextMetrics._measurementCache[textKey];\n\n        const font = fontStringFromTextStyle(style);\n        const fontProperties = CanvasTextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = CanvasTextMetrics.__context; // canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? CanvasTextMetrics._wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = CanvasTextMetrics._measureText(lines[i], style.letterSpacing, context);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        const strokeWidth = style._stroke?.width || 0;\n\n        let width = maxLineWidth + strokeWidth;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadow.distance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize;\n\n        let height = Math.max(lineHeight, fontProperties.fontSize + (strokeWidth))\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadow.distance;\n        }\n\n        const measurements = new CanvasTextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n\n        // CanvasTextMetrics._measurementCache[textKey] = measurements;\n\n        return measurements;\n    }\n\n    private static _measureText(\n        text: string,\n        letterSpacing: number,\n        context: ICanvasRenderingContext2D\n    )\n    {\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        const metrics = context.measureText(text);\n        let metricWidth = metrics.width;\n        const actualBoundingBoxLeft = -metrics.actualBoundingBoxLeft;\n        const actualBoundingBoxRight = metrics.actualBoundingBoxRight;\n        let boundsWidth = actualBoundingBoxRight - actualBoundingBoxLeft;\n\n        if (metricWidth > 0)\n        {\n            if (useExperimentalLetterSpacing)\n            {\n                metricWidth -= letterSpacing;\n                boundsWidth -= letterSpacing;\n            }\n            else\n            {\n                const val = (CanvasTextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n\n                metricWidth += val;\n                boundsWidth += val;\n            }\n        }\n\n        // NOTE: this is a bit of a hack as metrics.width and the bounding box width do not measure the same thing\n        // We can't seem to exclusively use one or the other, so are taking the largest of the two\n        return Math.max(metricWidth, boundsWidth);\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static _wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = CanvasTextMetrics._collapseSpaces(whiteSpace);\n        const collapseNewlines = CanvasTextMetrics._collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = CanvasTextMetrics._tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (CanvasTextMetrics._isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += CanvasTextMetrics._addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = CanvasTextMetrics._getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += CanvasTextMetrics._addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (CanvasTextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = CanvasTextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n                        let lastChar = char;\n\n                        let k = 1;\n\n                        // we are not at the end of the token\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n\n                            // should not split chars\n                            if (!CanvasTextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            lastChar = nextChar;\n                            k++;\n                        }\n\n                        j += k - 1;\n\n                        const characterWidth = CanvasTextMetrics._getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += CanvasTextMetrics._addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += CanvasTextMetrics._addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += CanvasTextMetrics._addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += CanvasTextMetrics._addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !CanvasTextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += CanvasTextMetrics._addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convenience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static _addLine(line: string, newLine = true): string\n    {\n        line = CanvasTextMetrics._trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static _getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            width = CanvasTextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static _collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns should collapse\n     */\n    private static _collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param text - The text\n     * @returns Trimmed string\n     */\n    private static _trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!CanvasTextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static _isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    public static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param text - The text\n     * @returns A tokenized array\n     */\n    private static _tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (CanvasTextMetrics.isBreakingSpace(char, nextChar) || CanvasTextMetrics._isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    public static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    public static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @param token - The token to split\n     * @returns The characters of the token\n     * @see CanvasTextMetrics.graphemeSegmenter\n     */\n    public static wordWrapSplit(token: string): string[]\n    {\n        return CanvasTextMetrics.graphemeSegmenter(token);\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): FontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (CanvasTextMetrics._fonts[font])\n        {\n            return CanvasTextMetrics._fonts[font];\n        }\n\n        const context = CanvasTextMetrics._context;\n\n        context.font = font;\n        const metrics = context.measureText(CanvasTextMetrics.METRICS_STRING + CanvasTextMetrics.BASELINE_SYMBOL);\n\n        const properties = {\n            ascent: metrics.actualBoundingBoxAscent,\n            descent: metrics.actualBoundingBoxDescent,\n            fontSize: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n        };\n\n        CanvasTextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete CanvasTextMetrics._fonts[font];\n        }\n        else\n        {\n            CanvasTextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!CanvasTextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    CanvasTextMetrics.__canvas = c as ICanvas;\n\n                    return c as ICanvas;\n                }\n\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            catch (_cx)\n            {\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            CanvasTextMetrics.__canvas = canvas;\n        }\n\n        return CanvasTextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!CanvasTextMetrics.__context)\n        {\n            CanvasTextMetrics.__context = CanvasTextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return CanvasTextMetrics.__context;\n    }\n}\n","import type { TextStyle } from '../../TextStyle';\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * Generates a font style string to use for `TextMetrics.measureFont()`.\n * @param style\n * @returns Font style string, for passing to `TextMetrics.measureFont()`\n */\nexport function fontStringFromTextStyle(style: TextStyle): string\n{\n    // build canvas api font setting from individual components. Convert a numeric style.fontSize to px\n    const fontSizeString = (typeof style.fontSize === 'number') ? `${style.fontSize}px` : style.fontSize;\n\n    // Clean-up fontFamily property by quoting each font name\n    // this will support font names with spaces\n    let fontFamilies: string | string[] = style.fontFamily;\n\n    if (!Array.isArray(style.fontFamily))\n    {\n        fontFamilies = style.fontFamily.split(',');\n    }\n\n    for (let i = fontFamilies.length - 1; i >= 0; i--)\n    {\n        // Trim any extra white-space\n        let fontFamily = fontFamilies[i].trim();\n\n        // Check if font already contains strings\n        if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && !genericFontFamilies.includes(fontFamily))\n        {\n            fontFamily = `\"${fontFamily}\"`;\n        }\n        (fontFamilies as string[])[i] = fontFamily;\n    }\n\n    // eslint-disable-next-line max-len\n    return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n}\n","import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../../utils/logging/warn';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern';\n\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { ConvertedFillStyle } from '../../../graphics/shared/FillTypes';\n\nexport function getCanvasFillStyle(\n    fillStyle: ConvertedFillStyle,\n    context: ICanvasRenderingContext2D): string | CanvasGradient | CanvasPattern\n{\n    if (fillStyle.texture === Texture.WHITE && !fillStyle.fill)\n    {\n        return Color.shared.setValue(fillStyle.color).setAlpha(fillStyle.alpha ?? 1).toHexa();\n    }\n    else if (!fillStyle.fill)\n    {\n        // fancy set up...\n        const pattern = context.createPattern(fillStyle.texture.source.resource, 'repeat');\n\n        // create an inverted scale matrix..\n        const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n\n        tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    else if (fillStyle.fill instanceof FillPattern)\n    {\n        const fillPattern = fillStyle.fill;\n\n        const pattern = context.createPattern(fillPattern.texture.source.resource, 'repeat');\n\n        const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n\n        tempMatrix.scale(\n            fillPattern.texture.frame.width,\n            fillPattern.texture.frame.height\n        );\n\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    else if (fillStyle.fill instanceof FillGradient)\n    {\n        const fillGradient = fillStyle.fill;\n\n        if (fillGradient.type === 'linear')\n        {\n            const gradient = context.createLinearGradient(\n                fillGradient.x0,\n                fillGradient.y0,\n                fillGradient.x1,\n                fillGradient.y1\n            );\n\n            fillGradient.gradientStops.forEach((stop) =>\n            {\n                gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n            });\n\n            return gradient;\n        }\n    }\n\n    // #if _DEBUG\n    warn('FillStyle not recognised', fillStyle);\n    // #endif\n\n    return 'red';\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { Text } from '../Text';\n\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as Text;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        const gpuText = this._getGpuText(text);\n\n        const newKey = text._getKey();\n\n        if (gpuText.currentKey !== newKey)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(text: Text, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(text);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(text: Text)\n    {\n        text.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableById(text.uid);\n    }\n\n    private _destroyRenderableById(textUid: number)\n    {\n        const gpuText = this._gpuText[textUid];\n\n        this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[textUid] = null;\n    }\n\n    private _updateText(text: Text)\n    {\n        const newKey = text._getKey();\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(text);\n        }\n\n        text._didTextUpdate = false;\n\n        const padding = text._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.texture)\n        {\n            this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n        }\n\n        gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n        gpuText.currentKey = text._getKey();\n        batchableSprite.texture = gpuText.texture;\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return this._gpuText[text.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const gpuTextData: CanvasTextPipe['_gpuText'][number] = {\n            texture: null,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n        };\n\n        gpuTextData.batchableSprite.renderable = text;\n        gpuTextData.batchableSprite.transform = text.groupTransform;\n        gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        gpuTextData.batchableSprite.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        this._gpuText[text.uid] = gpuTextData;\n\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        this._updateText(text);\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        text.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n","import { Rectangle } from '../../maths/shapes/Rectangle';\n\nimport type { ICanvas } from '../../environment/canvas/ICanvas';\n\nfunction checkRow(data: Uint8ClampedArray, width: number, y: number)\n{\n    for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\nfunction checkColumn(data: Uint8ClampedArray, width: number, x: number, top: number, bottom: number)\n{\n    const stride = 4 * width;\n\n    for (let y = top, index = (top * stride) + (4 * x); y <= bottom; ++y, index += stride)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\n/**\n * Measuring the bounds of a canvas' visible (non-transparent) pixels.\n * @param canvas - The canvas to measure.\n * @param resolution - The resolution of the canvas.\n * @returns The bounding box of the canvas' visible pixels.\n * @since 7.1.0\n * @memberof utils\n */\nexport function getCanvasBoundingBox(canvas: ICanvas, resolution = 1): Rectangle\n{\n    // https://gist.github.com/timdown/021d9c8f2aabc7092df564996f5afbbf\n\n    const { width, height } = canvas;\n\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n\n    if (context === null)\n    {\n        throw new TypeError('Failed to get canvas 2D context');\n    }\n\n    const imageData = context.getImageData(0, 0, width, height);\n    const data = imageData.data;\n\n    let left = 0;\n    let top = 0;\n    let right = width - 1;\n    let bottom = height - 1;\n\n    while (top < height && checkRow(data, width, top)) ++top;\n    if (top === height) return Rectangle.EMPTY;\n    while (checkRow(data, width, bottom)) --bottom;\n    while (checkColumn(data, width, left, top, bottom)) ++left;\n    while (checkColumn(data, width, right, top, bottom)) --right;\n\n    ++right;\n    ++bottom;\n\n    return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n","import { Color } from '../../../color/Color';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { nextPow2 } from '../../../maths/misc/pow2';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox';\nimport { deprecation } from '../../../utils/logging/deprecation';\nimport { TextStyle } from '../TextStyle';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource';\nimport { CanvasTextMetrics } from './CanvasTextMetrics';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { TextOptions } from '../AbstractText';\nimport type { Text } from '../Text';\n\ninterface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * System plugin to the renderer to manage canvas text.\n * @memberof rendering\n */\nexport class CanvasTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'canvasText',\n    } as const;\n\n    private _activeTextures: Record<string, {\n        canvasAndContext: CanvasAndContext,\n        texture: Texture,\n        usageCount: number,\n    }> = {};\n\n    private readonly _renderer: Renderer;\n\n    constructor(_renderer: Renderer)\n    {\n        this._renderer = _renderer;\n    }\n\n    public getTextureSize(text: string, resolution: number, style: TextStyle): { width: number, height: number }\n    {\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        let width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        let height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        width = Math.ceil((width) - 1e-6);\n        height = Math.ceil((height) - 1e-6);\n        width = nextPow2(width);\n        height = nextPow2(height);\n\n        return { width, height };\n    }\n\n    /**\n     * This is a function that will create a texture from a text string, style and resolution.\n     * Useful if you want to make a texture of your text and use if for various other pixi things!\n     * @param options - The options of the text that will be used to generate the texture.\n     * @param options.text - the text to render\n     * @param options.style - the style of the text\n     * @param options.resolution - the resolution of the texture\n     * @returns the newly created texture\n     */\n    /** @deprecated since 8.0.0 */\n    public getTexture(text: string, resolution: number, style: TextStyle, textKey: string): Texture;\n    public getTexture(options: TextOptions): Texture;\n    public getTexture(options: TextOptions | string, resolution?: number, style?: TextStyle, _textKey?: string): Texture\n    {\n        if (typeof options === 'string')\n        {\n            // #if _DEBUG\n            deprecation('8.0.0', 'CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments');\n            // #endif\n\n            options = {\n                text: options,\n                style,\n                resolution,\n            };\n        }\n\n        if (!(options.style instanceof TextStyle))\n        {\n            options.style = new TextStyle(options.style);\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(\n            options as {text: string, style: TextStyle, resolution?: number}\n        );\n\n        this._renderer.texture.initSource(texture._source);\n\n        CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n        return texture;\n    }\n\n    public createTextureAndCanvas(options: {text: string, style: TextStyle, resolution?: number})\n    {\n        const { text, style } = options;\n\n        const resolution = options.resolution ?? this._renderer.resolution;\n\n        // create a canvas with the word hello on it\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n\n        // create a texture from the canvas\n        const { canvas } = canvasAndContext;\n\n        this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n\n        const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n\n        if (style.trim)\n        {\n            const trimmed = getCanvasBoundingBox(canvas, resolution);\n\n            texture.frame.copyFrom(trimmed);\n\n            texture.updateUvs();\n        }\n\n        return { texture, canvasAndContext };\n    }\n\n    public getManagedTexture(text: Text)\n    {\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        const textKey = text._getKey();\n\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].texture;\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n\n        this._activeTextures[textKey] = {\n            canvasAndContext,\n            texture,\n            usageCount: 1,\n        };\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n            TexturePool.returnTexture(activeTexture.texture);\n\n            const source = activeTexture.texture.source;\n\n            source.resource = null;\n            source.uploadMethodId = 'unknown';\n            source.alphaMode = 'no-premultiply-alpha';\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param text\n     * @param style\n     * @param resolution\n     * @param canvasAndContext\n     */\n    public renderTextToCanvas(text: string, style: TextStyle, resolution: number, canvasAndContext: CanvasAndContext): void\n    {\n        const { canvas, context } = canvasAndContext;\n\n        const font = fontStringFromTextStyle(style);\n\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);// , canvas);\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        const height = canvas.height;\n\n        context.resetTransform();\n        context.scale(resolution, resolution);\n        context.textBaseline = style.textBaseline;\n\n        // set stroke styles..\n\n        if (style._stroke?.width)\n        {\n            const strokeStyle = style._stroke;\n\n            context.lineWidth = strokeStyle.width;\n\n            context.miterLimit = strokeStyle.miterLimit;\n            context.lineJoin = strokeStyle.join;\n            context.lineCap = strokeStyle.cap;\n        }\n\n        // return;\n        context.font = font;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const shadowOptions = style.dropShadow;\n\n                const dropShadowColor = shadowOptions.color;\n                const dropShadowAlpha = shadowOptions.alpha;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(dropShadowAlpha)\n                    .toRgbaString();\n\n                const dropShadowBlur = shadowOptions.blur * resolution;\n                const dropShadowDistance = shadowOptions.distance * resolution;\n\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(shadowOptions.angle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n\n                if (style._stroke?.width)\n                {\n                    context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n                }\n\n                context.shadowColor = 'black';\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            const strokeWidth = style._stroke?.width ?? 0;\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = strokeWidth / 2;\n                linePositionY = ((strokeWidth / 2) + (i * lineHeight)) + fontProperties.ascent + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style._stroke?.width)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style._fill !== undefined)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param style\n     * @param canvasAndContext\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private _drawLetterSpacing(\n        text: string,\n        style: TextStyle,\n        canvasAndContext: CanvasAndContext,\n        x: number, y: number,\n        isStroke = false\n    ): void\n    {\n        const { context } = canvasAndContext;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                context.strokeText(text, x, y);\n            }\n            else\n            {\n                context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n        let previousWidth = context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem';\n\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n","import { Color } from '../../../color/Color';\n\nimport type { ConvertedFillStyle, ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { HTMLTextStyle } from '../../text-html/HTMLTextStyle';\nimport type { TextStyle } from '../TextStyle';\n\nconst valuesToIterateForKeys: Partial<keyof TextStyle | keyof HTMLTextStyle>[] = [\n    'align',\n    'breakWords',\n    'cssOverrides',\n    'fontVariant',\n    'fontWeight',\n    'leading',\n    'letterSpacing',\n    'lineHeight',\n    'padding',\n    'textBaseline',\n    'trim',\n    'whiteSpace',\n    'wordWrap',\n    'wordWrapWidth',\n    'fontFamily',\n    'fontStyle',\n    'fontSize',\n] as const;\n\n/**\n * Generates a unique key for the text style.\n * @param style - The style to generate a key for.\n * @returns the key for the style.\n */\nexport function generateTextStyleKey(style: TextStyle): string\n{\n    const key = [];\n\n    let index = 0;\n\n    for (let i = 0; i < valuesToIterateForKeys.length; i++)\n    {\n        const prop = `_${valuesToIterateForKeys[i]}`;\n\n        key[index++] = style[prop as keyof typeof style];\n    }\n\n    index = addFillStyleKey(style._fill, key as string[], index);\n    index = addStokeStyleKey(style._stroke, key as string[], index);\n    index = addDropShadowKey(style.dropShadow, key as string[], index);\n\n    return key.join('-');\n}\n\nfunction addFillStyleKey(fillStyle: ConvertedFillStyle, key: (number | string)[], index: number)\n{\n    if (!fillStyle) return index;\n\n    key[index++] = fillStyle.color;\n    key[index++] = fillStyle.alpha;\n    key[index++] = fillStyle.fill?.styleKey;\n\n    return index;\n}\n\nfunction addStokeStyleKey(strokeStyle: ConvertedStrokeStyle, key: (number | string)[], index: number)\n{\n    if (!strokeStyle) return index;\n\n    index = addFillStyleKey(strokeStyle, key, index);\n\n    key[index++] = strokeStyle.width;\n    key[index++] = strokeStyle.alignment;\n    key[index++] = strokeStyle.cap;\n    key[index++] = strokeStyle.join;\n    key[index++] = strokeStyle.miterLimit;\n\n    return index;\n}\n\nfunction addDropShadowKey(dropShadow: TextStyle['dropShadow'], key: (number | string)[], index: number)\n{\n    if (!dropShadow) return index;\n\n    key[index++] = dropShadow.alpha;\n    key[index++] = dropShadow.angle;\n    key[index++] = dropShadow.blur;\n    key[index++] = dropShadow.distance;\n    key[index++] = Color.shared.setValue(dropShadow.color).toNumber();\n\n    return index;\n}\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from '../../container/bounds/Bounds';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst tempBounds = new Bounds();\n\n/**\n * Takes an image and creates a texture from it, using a power of 2 texture from the texture pool.\n * Remember to return the texture when you don't need it any more!\n * @param image - The image to create a texture from\n * @param width - the frame width of the texture\n * @param height - the frame height of the texture\n * @param resolution - The resolution of the texture\n * @returns - The texture\n */\nexport function getPo2TextureFromSource(\n    image: HTMLImageElement | HTMLCanvasElement | ICanvas,\n    width: number,\n    height: number,\n    resolution: number\n): Texture\n{\n    const bounds = tempBounds;\n\n    bounds.minX = 0;\n    bounds.minY = 0;\n\n    bounds.maxX = (image.width / resolution) | 0;\n    bounds.maxY = (image.height / resolution) | 0;\n\n    const texture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        resolution,\n        false\n    );\n\n    texture.source.uploadMethodId = 'image';\n    texture.source.resource = image;\n    texture.source.alphaMode = 'premultiply-alpha-on-upload';\n\n    texture.frame.width = width / resolution;\n    texture.frame.height = height / resolution;\n\n    // We want to update the resource on the GPU,\n    // but we do not want to resize the texture.\n    // calling `texture.source.update` will fit the resource to the texture\n    // causing a resize of the texture on the GPU.\n    // which is not what we want!\n    texture.source.emit('update', texture.source);\n\n    texture.updateUvs();\n\n    return texture;\n}\n"],"names":["ResizePlugin","init","options","Object","defineProperty","this","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","window","innerWidth","innerHeight","clientWidth","clientHeight","renderer","render","resizeTo","destroy","extension","ExtensionType","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","add","UPDATE_PRIORITY","LOW","stop","start","Ticker","shared","oldTicker","extensions","FilterPipe","constructor","_renderer","push","filterEffect","container","instructionSet","renderPipes","batch","break","renderPipeId","canBundle","action","pop","_filterEffect","_container","execute","instruction","filter","type","WebGLPipes","WebGPUPipes","CanvasPipes","name","tempMatrix","Matrix","getFastGlobalBounds","target","bounds","clear","_getGlobalBoundsRecursive","isValid","renderGroup","parentRenderGroup","applyMatrix","worldTransform","localDisplayStatus","measurable","manageEffects","effects","length","localBounds","boundsPool","boundsArea","addRect","viewBounds","addFrame","minX","minY","maxX","maxY","groupTransform","children","i","advanced","addBounds","copyTo","invert","relativeGroupTransform","return","quadGeometry","Geometry","attributes","aPosition","buffer","Float32Array","format","stride","offset","indexBuffer","Uint32Array","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","UniformGroup","uInputSize","value","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","BindGroup","activeBackTexture","_this$_activeFilterDa","_activeFilterData","backTexture","filters","_getFilterData","filterData","skip","renderables","matrix","renderable","globalDisplayStatus","getGlobalRenderableBounds","filterArea","filterFrameTransform","cacheToLocalTransform","colorTextureSource","renderTarget","colorTexture","source","resolution","Infinity","padding","antialias","blendRequired","enabled","clipToViewport","_renderer$backBuffer$","_renderer$backBuffer","Math","min","_resolution","compatibleRenderers","backBuffer","useBackBuffer","warn","viewPort","rootViewPort","rootResolution","fitBounds","scale","ceil","pad","isPositive","previousRenderSurface","renderSurface","inputTexture","TexturePool","getOptimalTexture","bind","globalUniforms","Texture","EMPTY","finishRenderPass","previousBounds","getRenderTarget","getBackTexture","setResource","style","apply","returnTexture","flip","flop","t","lastRenderSurface","backgroundResolution","x","y","floor","copyToTexture","applyFilter","input","output","Point","isFinalTarget","rootRenderTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","frame","pixelWidth","pixelHeight","rootTexture","isRoot","update","uniformBatch","batchUniforms","getUboResource","groups","encoder","draw","geometry","shader","state","_state","topology","RendererType","WEBGL","Bounds","calculateSpriteMatrix","outputMatrix","sprite","data","mappedMatrix","_source","prepend","texture","translate","anchor","WebGLSystem","WebGPUSystem","localUniformBit","vertex","header","main","end","localUniformBitGroup2","_objectSpread","replace","localUniformBitGl","blendModeIds","normal","multiply","screen","overlay","erase","max","_State","blendMode","polygonOffset","blend","depthMask","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","toString","concat","for2d","default2d","State","CanvasPool","canvasOptions","_canvasPool","create","enableFullScreen","_createCanvasAndContext","canvas","DOMAdapter","createCanvas","context","getContext","getOptimalCanvasAndContext","minWidth","minHeight","arguments","undefined","key","nextPow2","canvasAndContext","returnCanvasAndContext","clearRect","color32BitToUniform","abgr","out","alpha","GraphicsPipe","adaptor","_graphicsBatchesHash","_destroyRenderableBound","destroyRenderable","_adaptor","renderableGC","addManagedHash","validateRenderable","graphics","wasBatched","uid","gpuContext","graphicsContext","updateGpuContext","isBatchable","addRenderable","didViewUpdate","_rebuild","_addToBatcher","updateRenderable","batches","_batcher","updateElement","_removeBatchForRenderable","off","isRenderable","getGpuContext","customShader","groupBlendMode","localUniforms","resources","uTransformMatrix","uRound","_roundPixels","groupColorAlpha","uColor","_initBatchesForRenderable","batched","batchPipe","_getBatchesForRenderable","addToBatch","roundPixels","map","batchClone","BigPool","BatchableGraphics","on","graphicsUid","forEach","GraphicsContextSystem","MeshPipe","localUniformsBindGroup","_meshDataHash","_gpuBatchableMeshHash","mesh","meshData","_getMeshData","isBatched","_geometry","indices","indexSize","positions","vertexSize","batchableMesh","_getBatchableMesh","checkAndUpdateTexture","batcher","gpuBatchableMesh","_texture","gpuMesh","getAdjustedBlendModeBlend","_initMeshData","_mesh$_geometry$indic","_mesh$_geometry$posit","_initBatchableMesh","BatchableMesh","transform","batcherName","packAsQuad","indexOffset","attributeOffset","_batch","_uvUpdateId","_textureMatrixUpdateId","_topology","reset","uvs","uvBuffer","getBuffer","transformedUvs","textureMatrix","isSimple","_transformedUvs","_updateID","multiplyUvs","color","attributeSize","_MeshGeometry","_ref","deprecation","v8_0_0","defaultOptions","shrinkToFit","shrinkBuffersToFit","Buffer","label","usage","BufferUsage","VERTEX","COPY_DST","aUV","INDEX","batchMode","MeshGeometry","GlParticleContainerAdaptor","particleContainerPipe","defaultShader","uTexture","gl","getBuffers","glProgram","glType","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","TRIANGLES","particleChildren","createIndicesForQuads","size","outBuffer","totalIndices","Uint16Array","Error","j","generateUpdateFunction","properties","dynamic","funcFragments","property","code","getAttributeInfoFromFormat","unshift","functionSource","join","Function","ParticleBuffer","_options$size","_size","_generateParticleUpdateCache","staticVertexSize","dynamicVertexSize","attributeInfo","_dynamicStride","_staticStride","staticAttributeBuffer","ViewableBuffer","dynamicAttributeBuffer","dynamicOffset","staticOffset","_staticBuffer","_dynamicBuffer","addAttribute","attributeName","addIndex","uploadFunction","getParticleUpdate","_dynamicUpload","dynamicUpdate","_staticUpload","staticUpdate","keyGen","getParticleSyncKey","generateParticleUpdate","generateParticleUpdateFunction","particles","uploadStatic","setDataWithSize","byteLength","float32View","uint32View","ParticleShader","Shader","GlProgram","from","fragment","gpuProgram","GpuProgram","wgsl","entryPoint","WHITE","uSampler","TextureStyle","uTranslationMatrix","Color","uResolution","ParticleContainerPipe","_gpuBufferHash","_renderable","_initBuffer","_properties","_childrenDirty","transformationMatrix","globalUniformData","projectionMatrix","GlParticleContainerPipe","GpuParticleContainerAdaptor","getUniformBindGroup","getTextureBindGroup","GpuParticleContainerPipe","_PlaneGeometry","super","verticesX","verticesY","build","_this$verticesX","_this$verticesY","_this$width","_this$height","total","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_options$width","_options$height","_options$originalWidt","_options$originalHeig","_options$leftWidth","_options$rightWidth","_options$topHeight","_options$bottomHeight","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","updateUvs","updatePositions","w","scaleW","h","scaleH","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_gpuSpriteHash","gpuSprite","_getGpuSprite","_updateBatchableSprite","batchableSprite","_initGPUSprite","tilingBit","tilingBitGl","TilingSpriteShader","_gpuProgram","_glProgram","compileHighShaderGpuProgram","bits","roundPixelsBit","compileHighShaderGlProgram","roundPixelsBitGl","tilingUniforms","uMapCoord","uClampFrame","uClampOffset","uTextureTransform","uSizeAnchor","updateUniforms","anchorX","anchorY","textureWidth","textureHeight","a","b","c","d","tx","ty","mapCoord","QuadGeometry","sharedQuad","TilingSpritePipe","_tilingSpriteDataHash","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","tilingSprite","_updateBatchableMesh","bindGroup","_tileTransform","_tilingSpriteData$sha","_initTilingSpriteData","slice","renderableData","addressMode","applyAnchorToTexture","copyFrom","array","index","setUvs","setPositions","_nonPowOf2wrapping","supports","nonPowOf2wrapping","isPowerOfTwo","BatchableSprite","_attributeStart","localUniformMSDFBit","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","uDistance","maxTextures","getMaxTexturesPerBatch","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","batchSamplers","getBatchSamplersUniformGroup","AbstractBitmapFont","EventEmitter","chars","lineHeight","fontFamily","fontMetrics","fontSize","ascent","descent","baseLineOffset","distanceField","range","pages","applyFillAsTint","baseMeasurementFontSize","baseRenderedFontSize","font","pageTextures","distanceFieldRange","distanceFieldType","destroyTextures","emit","removeAllListeners","_this$chars$i$texture","page","resolveCharacters","result","item","Array","isArray","startCode","charCodeAt","endCode","i2","j2","String","fromCharCode","_DynamicBitmapFont","_dynamicOptions$skipK","_dynamicOptions$resol","_dynamicOptions$paddi","_padding","_measureCache","_currentChars","_currentX","_currentY","_currentPageIndex","_skipKerning","dynamicOptions","_textureSize","textureSize","_mipmap","mipmap","clone","overrideFill","_fill","fill","requestedFontSize","fontStringFromTextStyle","overrideSize","_stroke","_style","skipKerning","CanvasTextMetrics","measureFont","ensureCharacters","charList","char","includes","self","indexOf","pageData","_nextPage","textureSource","currentX","currentY","fontScale","maxCharHeight","skipTexture","maxTextureWidth","maxTextureHeight","_style$dropShadow$dis","_style$dropShadow","_style$_stroke$width","_style$_stroke","metrics","measureText","paddedWidth","fontStyle","paddedHeight","pageData2","xAdvance","dropShadow","distance","id","codePointAt","xOffset","yOffset","kerning","_drawGlyph","px","py","Rectangle","_applyKerning","newChars","measureCache","first","second","c1","c2","amount","textureResolution","_setupContext","ImageSource","resource","alphaMode","autoGenerateMipmaps","_stroke$width","textBaseline","stroke","strokeThickness","lineWidth","lineJoin","miterLimit","strokeStyle","getCanvasFillStyle","fillStyle","shadowOptions","rgb","setValue","toArray","dropShadowBlur","blur","dropShadowDistance","shadowColor","shadowBlur","shadowOffsetX","cos","angle","shadowOffsetY","sin","_stroke$width2","text","fontProperties","strokeText","fillText","TextStyle","DynamicBitmapFont","getBitmapTextLayout","trimEnd","layoutData","offsetY","lines","charPositions","spaceWidth","spacesIndex","currentLine","previousChar","firstWord","currentWord","spaceWord","nextWord","word","position","nextLine","lastChar","adjustedLetterSpacing","letterSpacing","adjustedWordWrapWidth","wordWrapWidth","isEnd","charData","test","wordWrap","nextCharWidth","align","measurementData","line","alignCenter","alignRight","indy","spaceIndex","totalSpaces","alignJustify","fontCount","BitmapFontManager","ALPHA","NUMERIC","ALPHANUMERIC","ASCII","getFont","_dynamicFont$ensureCh","fontFamilyKey","styleKey","substring","lastIndexOf","Cache","has","fnt","once","dynamicFont","call","getLayout","bitmapFont","install","_options","_ref2","_ref3","_ref4","textStyle","flatChars","uninstall","cacheKey","BitmapTextPipe","_gpuBitmapText","bitmapText","graphicsRenderable","_getGpuBitmapText","_didTextUpdate","_updateContext","syncWithProxy","_updateDistanceField","_destroyRenderableByUid","renderableUid","proxyGraphics","bitmapTextLayout","_anchor","_x","_y","tint","round","initGpuText","proxyRenderable","Graphics","dx","sqrt","dy","worldScale","abs","proxy","groupColor","groupAlpha","HTMLTextPipe","_gpuText","runners","resolutionChange","gpuText","_autoResolution","onViewUpdate","htmlText","_getGpuText","newKey","_getKey","textureNeedsUploading","currentKey","_updateText","_destroyRenderableById","htmlTextUid","decreaseReferenceCount","_updateGpuText","catch","e","console","error","updateQuadBounds","_htmlText$resolution","generatingTexture","getManagedTexture","gpuTextData","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","image","Image","setAttribute","overflow","appendChild","textStyleToCSS","cssStyleString","toHex","fontWeight","fontVariant","whiteSpace","breakWords","strokeToCSS","dropShadowToCSS","cssOverrides","cssStyles","tagStyles","tagStyle","cssTagStyle","templates","tagStyleToCSS","dropShadowStyle","setAlpha","toHexa","HTMLTextStyle","_this$cssOverrides","_options$tagStyles","_cssOverrides","_generateKey","_styleKey","generateTextStyleKey","_cssStyle","cssStyle","addOverride","_len","_key","toAdd","v","removeOverride","_len2","_key2","toRemove","loadFontCSS","url","dataSrc","response","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_activeTextures","_createCanvas","WEBGPU","getTexture","_buildTexturePromise","textKey","_increaseReferenceCount","promise","then","usageCount","htmlTextData","fontFamilies","dedupe","matches","match","addFontFamily","fontFamily2","split","trim","extractFontFamilies","fontCSS","fontPromises","all","getFontCss","defaultTextStyle","measured","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","doublePadding","measureHtmlText","svgURL","XMLSerializer","serializeToString","getSVGUrl","delay","async","resolve2","setTimeout","onload","src","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","isSafari","drawImage","getTemporaryCanvasFromImage","getPo2TextureFromSource","initSource","activeTexture","_cleanUp","uploadMethodId","getReferenceCount","CanvasSystem","defaultFontOptions","_TextStyle","oldStyle","_oldStyle$dropShadowA","_oldStyle$dropShadowA2","_oldStyle$dropShadowB","_oldStyle$dropShadowC","_oldStyle$dropShadowD","defaults","defaultDropShadow","dropShadowAlpha","dropShadowAngle","dropShadowColor","obj","isColorLike","FillGradient","FillPattern","hasOwnProperty","fillGradientStops","parseInt","gradientFill","fills","toNumber","number","ratio","addColorStop","convertV7Tov8Style","fullStyle","_align","_breakWords","_dropShadow","_createProxy","_fontFamily","_fontSize","_fontStyle","toLowerCase","_fontVariant","_fontWeight","leading","_leading","_letterSpacing","_lineHeight","_trim","_textBaseline","_whiteSpace","_wordWrap","_wordWrapWidth","_originalFill","_isFillStyle","GraphicsContext","defaultFillStyle","toFillStyle","_originalStroke","defaultStrokeStyle","toStrokeStyle","defaultStyle","_this$_fill","_this$_originalFill","_this$_stroke","_this$_originalStroke","destroyTextureSource","cb","Proxy","newValue","PI","contextSettings","willReadFrequently","_CanvasTextMetrics","experimentalLetterSpacingSupported","_experimentalLetterSpacingSupported","proto","getCanvasRenderingContext2D","prototype","lineWidths","maxLineWidth","_canvas","_measurementCache","__context","_measureText","strokeWidth","useExperimentalLetterSpacing","experimentalLetterSpacing","textLetterSpacing","metricWidth","actualBoundingBoxLeft","boundsWidth","actualBoundingBoxRight","val","graphemeSegmenter","cache","collapseSpaces","_collapseSpaces","collapseNewlines","_collapseNewlines","canPrependSpaces","tokens","_tokenize","token","_isNewline","_addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","_getFromCache","canBreakWords","characters","wordWrapSplit","k","nextChar","canBreakChars","characterWidth","isLastToken","newLine","_trimRight","_newlines","_nextChar","_breakingSpaces","_token","_char","_index","_fonts","_context","METRICS_STRING","BASELINE_SYMBOL","actualBoundingBoxAscent","actualBoundingBoxDescent","clearMetrics","__canvas","OffscreenCanvas","_cx","BASELINE_MULTIPLIER","HEIGHT_MULTIPLIER","_Intl","Intl","Segmenter","segmenter","s","segment","genericFontFamilies","fontSizeString","_fillStyle$alpha","pattern","createPattern","setTransform","fillPattern","fillGradient","gradient","createLinearGradient","x0","y0","x1","y1","gradientStops","CanvasTextPipe","textUid","canvasText","checkRow","checkColumn","top","bottom","CanvasTextSystem","getTextureSize","_textKey","createTextureAndCanvas","_options$resolution","renderTextToCanvas","trimmed","TypeError","getImageData","left","right","getCanvasBoundingBox","resetTransform","lineCap","cap","linePositionX","linePositionY","passesCount","_style$_stroke3","isShadowPass","dsOffsetText","dsOffsetShadow","toRgbaString","_style$_stroke2","linePositionYShift","_style$_stroke4","_drawLetterSpacing","isStroke","currentPosition","stringArray","previousWidth","currentWidth","currentChar","textStr","valuesToIterateForKeys","prop","addFillStyleKey","alignment","addStokeStyleKey","addDropShadowKey","_fillStyle$fill","tempBounds"],"sourceRoot":""}